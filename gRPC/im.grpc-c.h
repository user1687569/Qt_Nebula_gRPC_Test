/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: im.proto */

#ifndef PROTOBUF_C_im_2eproto__INCLUDED
#define PROTOBUF_C_im_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

#include <grpc/grpc.h>
#include <grpc/byte_buffer_reader.h>
#include <grpc/support/alloc.h>
#include <grpc/support/log.h>
#include <grpc-c/grpc-c.h>

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _GIm__ImCmdHead GIm__ImCmdHead;
typedef struct _GIm__ImCmdHead g_im__im_cmd_head;
#define g_im__im_cmd_head__init g_im__im_cmd_head__init
#define g_im__im_cmd_head__free_unpacked g_im__im_cmd_head__free_unpacked
typedef struct _GIm__ImAuth GIm__ImAuth;
typedef struct _GIm__ImAuth g_im__im_auth;
#define g_im__im_auth__init g_im__im_auth__init
#define g_im__im_auth__free_unpacked g_im__im_auth__free_unpacked
typedef struct _GIm__ImDataStore4unit GIm__ImDataStore4unit;
typedef struct _GIm__ImDataStore4unit g_im__im_data_store4unit;
#define g_im__im_data_store4unit__init g_im__im_data_store4unit__init
#define g_im__im_data_store4unit__free_unpacked g_im__im_data_store4unit__free_unpacked
typedef struct _GIm__ImDataStore4alarm GIm__ImDataStore4alarm;
typedef struct _GIm__ImDataStore4alarm g_im__im_data_store4alarm;
#define g_im__im_data_store4alarm__init g_im__im_data_store4alarm__init
#define g_im__im_data_store4alarm__free_unpacked g_im__im_data_store4alarm__free_unpacked
typedef struct _GIm__SmokeItem GIm__SmokeItem;
typedef struct _GIm__SmokeItem g_im__smoke_item;
#define g_im__smoke_item__init g_im__smoke_item__init
#define g_im__smoke_item__free_unpacked g_im__smoke_item__free_unpacked
typedef struct _GIm__SmokeData GIm__SmokeData;
typedef struct _GIm__SmokeData g_im__smoke_data;
#define g_im__smoke_data__init g_im__smoke_data__init
#define g_im__smoke_data__free_unpacked g_im__smoke_data__free_unpacked
typedef struct _GIm__ImCoItem GIm__ImCoItem;
typedef struct _GIm__ImCoItem g_im__im_co_item;
#define g_im__im_co_item__init g_im__im_co_item__init
#define g_im__im_co_item__free_unpacked g_im__im_co_item__free_unpacked
typedef struct _GIm__ImCoData GIm__ImCoData;
typedef struct _GIm__ImCoData g_im__im_co_data;
#define g_im__im_co_data__init g_im__im_co_data__init
#define g_im__im_co_data__free_unpacked g_im__im_co_data__free_unpacked
typedef struct _GIm__ImFanItem GIm__ImFanItem;
typedef struct _GIm__ImFanItem g_im__im_fan_Item;
#define g_im__im_fan_Item__init g_im__im_fan__item__init
#define g_im__im_fan_Item__free_unpacked g_im__im_fan__item__free_unpacked
typedef struct _GIm__ImFanData GIm__ImFanData;
typedef struct _GIm__ImFanData g_im__im_fan_data;
#define g_im__im_fan_data__init g_im__im_fan_data__init
#define g_im__im_fan_data__free_unpacked g_im__im_fan_data__free_unpacked
typedef struct _GIm__ImTempItem GIm__ImTempItem;
typedef struct _GIm__ImTempItem g_im__im_temp_item;
#define g_im__im_temp_item__init g_im__im_temp_item__init
#define g_im__im_temp_item__free_unpacked g_im__im_temp_item__free_unpacked
typedef struct _GIm__EnvTempData GIm__EnvTempData;
typedef struct _GIm__EnvTempData g_im__env_temp_data;
#define g_im__env_temp_data__init g_im__env_temp_data__init
#define g_im__env_temp_data__free_unpacked g_im__env_temp_data__free_unpacked
typedef struct _GIm__NegativepressureData GIm__NegativepressureData;
typedef struct _GIm__NegativepressureData g_im__negativepressure_data;
#define g_im__negativepressure_data__init g_im__negativepressure_data__init
#define g_im__negativepressure_data__free_unpacked g_im__negativepressure_data__free_unpacked
typedef struct _GIm__AlarmParamData GIm__AlarmParamData;
typedef struct _GIm__AlarmParamData g_im__alarm_param_data;
#define g_im__alarm_param_data__init g_im__alarm_param_data__init
#define g_im__alarm_param_data__free_unpacked g_im__alarm_param_data__free_unpacked
typedef struct _GIm__AlarmSetParamData GIm__AlarmSetParamData;
typedef struct _GIm__AlarmSetParamData g_im__alarm_set_param_data;
#define g_im__alarm_set_param_data__init g_im__alarm_set_param_data__init
#define g_im__alarm_set_param_data__free_unpacked g_im__alarm_set_param_data__free_unpacked
typedef struct _GIm__SerucrityAlarmData GIm__SerucrityAlarmData;
typedef struct _GIm__SerucrityAlarmData g_im__serucrity_alarm_data;
#define g_im__serucrity_alarm_data__init g_im__serucrity_alarm_data__init
#define g_im__serucrity_alarm_data__free_unpacked g_im__serucrity_alarm_data__free_unpacked
typedef struct _GIm__SerucrityCombinationAlarmData GIm__SerucrityCombinationAlarmData;
typedef struct _GIm__SerucrityCombinationAlarmData g_im__serucrity_combination_alarm_data;
#define g_im__serucrity_combination_alarm_data__init g_im__serucrity_combination_alarm_data__init
#define g_im__serucrity_combination_alarm_data__free_unpacked g_im__serucrity_combination_alarm_data__free_unpacked
typedef struct _GIm__LowercomputerData GIm__LowercomputerData;
typedef struct _GIm__LowercomputerData g_im__lowercomputer_data;
#define g_im__lowercomputer_data__init g_im__lowercomputer_data__init
#define g_im__lowercomputer_data__free_unpacked g_im__lowercomputer_data__free_unpacked
typedef struct _GIm__PlcFailureData GIm__PlcFailureData;
typedef struct _GIm__PlcFailureData g_im__plc_failure_data;
#define g_im__plc_failure_data__init g_im__plc_failure_data__init
#define g_im__plc_failure_data__free_unpacked g_im__plc_failure_data__free_unpacked
typedef struct _GIm__ImStockSecurityInfo GIm__ImStockSecurityInfo;
typedef struct _GIm__ImStockSecurityInfo g_im__im_stock_securityInfo;
#define g_im__im_stock_securityInfo__init g_im__im_stock_security_info__init
#define g_im__im_stock_securityInfo__free_unpacked g_im__im_stock_security_info__free_unpacked
typedef struct _GIm__ImSecurityData GIm__ImSecurityData;
typedef struct _GIm__ImSecurityData g_im__im_security_data;
#define g_im__im_security_data__init g_im__im_security_data__init
#define g_im__im_security_data__free_unpacked g_im__im_security_data__free_unpacked
typedef struct _GIm__ImDeviceUpdateInfo GIm__ImDeviceUpdateInfo;
typedef struct _GIm__ImDeviceUpdateInfo g_im__im_device_update_info;
#define g_im__im_device_update_info__init g_im__im_device_update_info__init
#define g_im__im_device_update_info__free_unpacked g_im__im_device_update_info__free_unpacked
typedef struct _GIm__ImDevicePassthroughResponse GIm__ImDevicePassthroughResponse;
typedef struct _GIm__ImDevicePassthroughResponse g_im__im_device_passthrough_response;
#define g_im__im_device_passthrough_response__init g_im__im_device_passthrough_response__init
#define g_im__im_device_passthrough_response__free_unpacked g_im__im_device_passthrough_response__free_unpacked
typedef struct _GIm__ImDeviceUpgradeData GIm__ImDeviceUpgradeData;
typedef struct _GIm__ImDeviceUpgradeData g_im__im_device_upgrade_data;
#define g_im__im_device_upgrade_data__init g_im__im_device_upgrade_data__init
#define g_im__im_device_upgrade_data__free_unpacked g_im__im_device_upgrade_data__free_unpacked
typedef struct _GIm__ImDeviceUpgradNotify GIm__ImDeviceUpgradNotify;
typedef struct _GIm__ImDeviceUpgradNotify g_im__im_device_upgrad_notify;
#define g_im__im_device_upgrad_notify__init g_im__im_device_upgrad_notify__init
#define g_im__im_device_upgrad_notify__free_unpacked g_im__im_device_upgrad_notify__free_unpacked
typedef struct _GIm__ImNetcardParam GIm__ImNetcardParam;
typedef struct _GIm__ImNetcardParam g_im__im_netcard_param;
#define g_im__im_netcard_param__init g_im__im_netcard_param__init
#define g_im__im_netcard_param__free_unpacked g_im__im_netcard_param__free_unpacked
typedef struct _GIm__ImMasterChannelRet GIm__ImMasterChannelRet;
typedef struct _GIm__ImMasterChannelRet g_im__im_master_channel_ret;
#define g_im__im_master_channel_ret__init g_im__im_master_channel_ret__init
#define g_im__im_master_channel_ret__free_unpacked g_im__im_master_channel_ret__free_unpacked
typedef struct _GIm__ImStepJump GIm__ImStepJump;
typedef struct _GIm__ImStepJump g_im__im_step_jump;
#define g_im__im_step_jump__init g_im__im_step_jump__init
#define g_im__im_step_jump__free_unpacked g_im__im_step_jump__free_unpacked
typedef struct _GIm__ImChannelContinueRet GIm__ImChannelContinueRet;
typedef struct _GIm__ImChannelContinueRet g_im__im_channel_continue_ret;
#define g_im__im_channel_continue_ret__init g_im__im_channel_continue_ret__init
#define g_im__im_channel_continue_ret__free_unpacked g_im__im_channel_continue_ret__free_unpacked
typedef struct _GIm__ImChannelEnableByipResult GIm__ImChannelEnableByipResult;
typedef struct _GIm__ImChannelEnableByipResult g_im__im_channel_enable_byip_result;
#define g_im__im_channel_enable_byip_result__init g_im__im_channel_enable_byip_result__init
#define g_im__im_channel_enable_byip_result__free_unpacked g_im__im_channel_enable_byip_result__free_unpacked
typedef struct _GIm__ImChannelAppointStop GIm__ImChannelAppointStop;
typedef struct _GIm__ImChannelAppointStop g_im__im_channel_appoint_stop;
#define g_im__im_channel_appoint_stop__init g_im__im_channel_appoint_stop__init
#define g_im__im_channel_appoint_stop__free_unpacked g_im__im_channel_appoint_stop__free_unpacked
typedef struct _GIm__ImSecurityStopByStock GIm__ImSecurityStopByStock;
typedef struct _GIm__ImSecurityStopByStock g_im__im_security_stop_byStock;
#define g_im__im_security_stop_byStock__init g_im__im_security_stop_by_stock__init
#define g_im__im_security_stop_byStock__free_unpacked g_im__im_security_stop_by_stock__free_unpacked
typedef struct _GIm__ImChannelTest GIm__ImChannelTest;
typedef struct _GIm__ImChannelTest g_im__im_channel_test;
#define g_im__im_channel_test__init g_im__im_channel_test__init
#define g_im__im_channel_test__free_unpacked g_im__im_channel_test__free_unpacked
typedef struct _GIm__ImChannelClearWarn GIm__ImChannelClearWarn;
typedef struct _GIm__ImChannelClearWarn g_im__im_channel_clear_warn;
#define g_im__im_channel_clear_warn__init g_im__im_channel_clear_warn__init
#define g_im__im_channel_clear_warn__free_unpacked g_im__im_channel_clear_warn__free_unpacked
typedef struct _GIm__ImSecurityClearWarn GIm__ImSecurityClearWarn;
typedef struct _GIm__ImSecurityClearWarn g_im__im_security_clear_warn;
#define g_im__im_security_clear_warn__init g_im__im_security_clear_warn__init
#define g_im__im_security_clear_warn__free_unpacked g_im__im_security_clear_warn__free_unpacked
typedef struct _GIm__ImDisplayTimeProtection GIm__ImDisplayTimeProtection;
typedef struct _GIm__ImDisplayTimeProtection g_im__im_display_time_protection;
#define g_im__im_display_time_protection__init g_im__im_display_time_protection__init
#define g_im__im_display_time_protection__free_unpacked g_im__im_display_time_protection__free_unpacked
typedef struct _GIm__ImSoftUpdate GIm__ImSoftUpdate;
typedef struct _GIm__ImSoftUpdate g_im__im_soft_update;
#define g_im__im_soft_update__init g_im__im_soft_update__init
#define g_im__im_soft_update__free_unpacked g_im__im_soft_update__free_unpacked
typedef struct _GIm__ImDeviceUpdate GIm__ImDeviceUpdate;
typedef struct _GIm__ImDeviceUpdate g_im__im_device_update;
#define g_im__im_device_update__init g_im__im_device_update__init
#define g_im__im_device_update__free_unpacked g_im__im_device_update__free_unpacked
typedef struct _GIm__ImDevicePassthrough GIm__ImDevicePassthrough;
typedef struct _GIm__ImDevicePassthrough g_im__im_device_passthrough;
#define g_im__im_device_passthrough__init g_im__im_device_passthrough__init
#define g_im__im_device_passthrough__free_unpacked g_im__im_device_passthrough__free_unpacked
typedef struct _GIm__ImCmdRequest GIm__ImCmdRequest;
typedef struct _GIm__ImCmdRequest g_im__im_cmd_request;
#define g_im__im_cmd_request__init g_im__im_cmd_request__init
#define g_im__im_cmd_request__free_unpacked g_im__im_cmd_request__free_unpacked
typedef struct _GIm__ExecuteSerucrityResult GIm__ExecuteSerucrityResult;
typedef struct _GIm__ExecuteSerucrityResult g_im__execute_serucrity_result;
#define g_im__execute_serucrity_result__init g_im__execute_serucrity_result__init
#define g_im__execute_serucrity_result__free_unpacked g_im__execute_serucrity_result__free_unpacked
typedef struct _GIm__ImCmdResponse GIm__ImCmdResponse;
typedef struct _GIm__ImCmdResponse g_im__im_cmd_response;
#define g_im__im_cmd_response__init g_im__im_cmd_response__init
#define g_im__im_cmd_response__free_unpacked g_im__im_cmd_response__free_unpacked
typedef struct _GIm__ImChnnelWarn GIm__ImChnnelWarn;
typedef struct _GIm__ImChnnelWarn g_im__im_chnnel_warn;
#define g_im__im_chnnel_warn__init g_im__im_chnnel_warn__init
#define g_im__im_chnnel_warn__free_unpacked g_im__im_chnnel_warn__free_unpacked
typedef struct _GIm__ImExternData GIm__ImExternData;
typedef struct _GIm__ImExternData g_im__im_extern_data;
#define g_im__im_extern_data__init g_im__im_extern_data__init
#define g_im__im_extern_data__free_unpacked g_im__im_extern_data__free_unpacked
typedef struct _GIm__ImChannelParam GIm__ImChannelParam;
typedef struct _GIm__ImChannelParam g_im__im_channel_param;
#define g_im__im_channel_param__init g_im__im_channel_param__init
#define g_im__im_channel_param__free_unpacked g_im__im_channel_param__free_unpacked
typedef struct _GIm__ImCellParam GIm__ImCellParam;
typedef struct _GIm__ImCellParam g_im__im_cell_param;
#define g_im__im_cell_param__init g_im__im_cell_param__init
#define g_im__im_cell_param__free_unpacked g_im__im_cell_param__free_unpacked
typedef struct _GIm__ImUiData GIm__ImUiData;
typedef struct _GIm__ImUiData g_im__im_ui_data;
#define g_im__im_ui_data__init g_im__im_ui_data__init
#define g_im__im_ui_data__free_unpacked g_im__im_ui_data__free_unpacked
typedef struct _GIm__ImUiDataResponse GIm__ImUiDataResponse;
typedef struct _GIm__ImUiDataResponse g_im__im_ui_data_response;
#define g_im__im_ui_data_response__init g_im__im_ui_data_response__init
#define g_im__im_ui_data_response__free_unpacked g_im__im_ui_data_response__free_unpacked
typedef struct _GIm__ImAjustRequest GIm__ImAjustRequest;
typedef struct _GIm__ImAjustRequest g_im__im_ajust_request;
#define g_im__im_ajust_request__init g_im__im_ajust_request__init
#define g_im__im_ajust_request__free_unpacked g_im__im_ajust_request__free_unpacked
typedef struct _GIm__ImAjustResponse GIm__ImAjustResponse;
typedef struct _GIm__ImAjustResponse g_im__im_ajust_response;
#define g_im__im_ajust_response__init g_im__im_ajust_response__init
#define g_im__im_ajust_response__free_unpacked g_im__im_ajust_response__free_unpacked
typedef struct _GIm__ImDebugRequest GIm__ImDebugRequest;
typedef struct _GIm__ImDebugRequest g_im__im_debug_request;
#define g_im__im_debug_request__init g_im__im_debug_request__init
#define g_im__im_debug_request__free_unpacked g_im__im_debug_request__free_unpacked
typedef struct _GIm__ImDebugResponse GIm__ImDebugResponse;
typedef struct _GIm__ImDebugResponse g_im__im_debug_response;
#define g_im__im_debug_response__init g_im__im_debug_response__init
#define g_im__im_debug_response__free_unpacked g_im__im_debug_response__free_unpacked
typedef struct _GIm__ImEepromRequest GIm__ImEepromRequest;
typedef struct _GIm__ImEepromRequest g_im__im_eeprom_request;
#define g_im__im_eeprom_request__init g_im__im_eeprom_request__init
#define g_im__im_eeprom_request__free_unpacked g_im__im_eeprom_request__free_unpacked
typedef struct _GIm__ImEepromReadResponse GIm__ImEepromReadResponse;
typedef struct _GIm__ImEepromReadResponse g_im__im_eeprom_read_response;
#define g_im__im_eeprom_read_response__init g_im__im_eeprom_read_response__init
#define g_im__im_eeprom_read_response__free_unpacked g_im__im_eeprom_read_response__free_unpacked
typedef struct _GIm__ImEepromWriteResponse GIm__ImEepromWriteResponse;
typedef struct _GIm__ImEepromWriteResponse g_im__im_eeprom_write_response;
#define g_im__im_eeprom_write_response__init g_im__im_eeprom_write_response__init
#define g_im__im_eeprom_write_response__free_unpacked g_im__im_eeprom_write_response__free_unpacked
typedef struct _GIm__NegativePressureParam GIm__NegativePressureParam;
typedef struct _GIm__NegativePressureParam g_im__negative_pressure_param;
#define g_im__negative_pressure_param__init g_im__negative_pressure_param__init
#define g_im__negative_pressure_param__free_unpacked g_im__negative_pressure_param__free_unpacked
typedef struct _GIm__ImNegativePressureRequest GIm__ImNegativePressureRequest;
typedef struct _GIm__ImNegativePressureRequest g_im__im_negative_pressure_request;
#define g_im__im_negative_pressure_request__init g_im__im_negative_pressure_request__init
#define g_im__im_negative_pressure_request__free_unpacked g_im__im_negative_pressure_request__free_unpacked
typedef struct _GIm__ImNegativePressureResponse GIm__ImNegativePressureResponse;
typedef struct _GIm__ImNegativePressureResponse g_im__im_negative_pressure_response;
#define g_im__im_negative_pressure_response__init g_im__im_negative_pressure_response__init
#define g_im__im_negative_pressure_response__free_unpacked g_im__im_negative_pressure_response__free_unpacked
typedef struct _GIm__ImVersionQueryRequest GIm__ImVersionQueryRequest;
typedef struct _GIm__ImVersionQueryRequest g_im__im_version_query_request;
#define g_im__im_version_query_request__init g_im__im_version_query_request__init
#define g_im__im_version_query_request__free_unpacked g_im__im_version_query_request__free_unpacked
typedef struct _GIm__ImVersionQueryResponse GIm__ImVersionQueryResponse;
typedef struct _GIm__ImVersionQueryResponse g_im__im_version_query_response;
#define g_im__im_version_query_response__init g_im__im_version_query_response__init
#define g_im__im_version_query_response__free_unpacked g_im__im_version_query_response__free_unpacked


/* --- enums --- */

typedef enum _GIm__CmdType {
  /*
   * 广播命令
   */
  G_IM__CMD_TYPE__BOARDCAST = 0,
  /*
   * 工步文件更新
   */
  G_IM__CMD_TYPE__STEPFILE_UPDATE = 1,
  /*
   * 通道启动工步
   */
  G_IM__CMD_TYPE__CHANNEL_STEP_STRAT = 2,
  /*
   * 通道暂停
   */
  G_IM__CMD_TYPE__CHANNEL_PAUSE = 3,
  /*
   * 通道继续
   */
  G_IM__CMD_TYPE__CHANNEL_CONTINUE = 4,
  /*
   * 通道停止
   */
  G_IM__CMD_TYPE__CHANNLE_STOP = 5,
  /*
   * 通道清除故障
   */
  G_IM__CMD_TYPE__CHANNLE_CLEAR_FAULT = 6,
  /*
   * 通道禁用
   */
  G_IM__CMD_TYPE__CHANNEL_DISABLE = 7,
  /*
   * 通道启用
   */
  G_IM__CMD_TYPE__CHANNEL_ENABLE = 8,
  /*
   * 通道并联
   */
  G_IM__CMD_TYPE__CHANNEL_UNION = 9,
  /*
   * 通道迁移
   */
  G_IM__CMD_TYPE__CHANNEL_TRANS = 10,
  /*
   * 通道取消联动
   */
  G_IM__CMD_TYPE__CHANNEL_LINK_CANCEL = 11,
  /*
   * 通道工步跳转
   */
  G_IM__CMD_TYPE__CHANNEL_STEP_JUMP = 12,
  /*
   * 通道预约暂停
   */
  G_IM__CMD_TYPE__CHANNEL_PAUSE_APPOINT = 13,
  /*
   * 通道NEW工步文件删除
   */
  G_IM__CMD_TYPE__CHANNEL_NEW_STEPFILE_DEL = 14,
  /*
   * IP通道启用禁用
   */
  G_IM__CMD_TYPE__CHANNEL_ENABLE_BYIP = 15,
  /*
   * 中位机版本获取
   */
  G_IM__CMD_TYPE__IM_SOFTVESION_GET = 16,
  /*
   * 升级中位机
   */
  G_IM__CMD_TYPE__IM_SOFT_UPDATE = 17,
  /*
   * 系统配置更新
   */
  G_IM__CMD_TYPE__SYSCONF_UPDATE = 18,
  /*
   * 系统时间设置
   */
  G_IM__CMD_TYPE__CLOCKTIME_SET = 19,
  /*
   * 获取自检结果
   */
  G_IM__CMD_TYPE__SELFCHECK_GET = 20,
  /*
   * 外设文件更新
   */
  G_IM__CMD_TYPE__EXTERN_FILE_UPDATE = 21,
  /*
   * 授权使用
   */
  G_IM__CMD_TYPE__IM_AUTH = 22,
  /*
   * 读取授权信息
   */
  G_IM__CMD_TYPE__IM_AUTH_READ = 23,
  /*
   * 安防文件更新
   */
  G_IM__CMD_TYPE__SECURITY_FILE_UPDATE = 24,
  /*
   * 安防停止
   */
  G_IM__CMD_TYPE__SECURITY_STOP = 25,
  /*
   * 传输模式
   */
  G_IM__CMD_TYPE__SECURITY_TRANSFER_MODEL = 26,
  /*
   * 获取安防数据
   */
  G_IM__CMD_TYPE__GET_SECURITY_DATA = 27,
  /*
   * 电源柜风机状态
   */
  G_IM__CMD_TYPE__FANS_STATE_GET = 28,
  /*
   * 安防外部电芯温度启用禁用
   */
  G_IM__CMD_TYPE__SECURITY_EX_TEMP_ENABLE = 29,
  /*
   * 声光报警声音使能
   */
  G_IM__CMD_TYPE__LIGHT_SOUND_ALARM_ENABLE = 30,
  /*
   * 库位数据存储
   */
  G_IM__CMD_TYPE__DATA_STORE_FOR_UNITS = 31,
  /*
   * 启用禁用32VT采集
   */
  G_IM__CMD_TYPE__IM_32VT_ENABLE = 32,
  /*
   * 告警数据存储
   */
  G_IM__CMD_TYPE__DATA_STORE_FOR_ALARM = 33,
  /*
   * 中位机重启
   */
  G_IM__CMD_TYPE__IM_SYSTEM_RESTART = 34,
  /*
   * 读EEPROM
   */
  G_IM__CMD_TYPE__IM_READ_EEPROM = 35,
  /*
   * 写EEPROM
   */
  G_IM__CMD_TYPE__IM_WRITE_EEPROM = 36,
  /*
   * 库位清除告警
   */
  G_IM__CMD_TYPE__UNIT_CLEAR_FAULT = 37,
  /*
   * 闲时保护
   */
  G_IM__CMD_TYPE__DISPLAY_TIME_PROTECTION = 38,
  /*
   * 停止闲时记录
   */
  G_IM__CMD_TYPE__STOP_DISPLAY_TIME_RECORD = 39,
  /*
   * 存储数据文件更新
   */
  G_IM__CMD_TYPE__STORAGE_FILE_UPDATE = 40,
  /*
   * 安防复位
   */
  G_IM__CMD_TYPE__SECURITY_REST = 41,
  /*
   * 安防反馈
   */
  G_IM__CMD_TYPE__SECURITY_FEEDBACK = 42,
  /*
   * 工装校准之继电器控制
   */
  G_IM__CMD_TYPE__ADJUST_RELAY_CONTROL = 43,
  /*
   * 工装校准之加载参数
   */
  G_IM__CMD_TYPE__ADJUST_LOAD_PARAM = 44,
  /*
   * 工装校准之调试查询
   */
  G_IM__CMD_TYPE__ADJUST_DEBUG = 45,
  /*
   * 工装校准之清除告警
   */
  G_IM__CMD_TYPE__ADJUST_CLEAR_FAULTS = 46,
  /*
   * 工装校准锁定
   */
  G_IM__CMD_TYPE__ADJUST_LOCK = 47,
  /*
   * 工装校准解锁
   */
  G_IM__CMD_TYPE__ADJUST_UNLOCK = 48,
  /*
   * 工装校准之透传控制
   */
  G_IM__CMD_TYPE__ADJUST_TRANS_CONTROL = 49,
  /*
   * 负压工装校准
   */
  G_IM__CMD_TYPE__NEGATIVE_PRESSURE_ADJUST = 50,
  /*
   * 启动负压测漏
   */
  G_IM__CMD_TYPE__NEGATIVE_PRESSURE_LEAKAGE_DETECT_START = 51,
  /*
   * 启动负压测堵
   */
  G_IM__CMD_TYPE__NEGATIVE_PRESSURE_PLUGGING_DETECT_START = 52,
  /*
   * 负压文件更新
   */
  G_IM__CMD_TYPE__NEGATIVE_PRESSURE_FILE_UPDATE = 53,
  /*
   * 压床脱开
   */
  G_IM__CMD_TYPE__PRESS_DISENGAGE = 54,
  /*
   * 设备升级开始——上位机将升级包置于中位机的FTP后，给中位机发送此命令
   */
  G_IM__CMD_TYPE__DEVICE_UPDATE_START = 55,
  /*
   * 设备命令透传：当前主要用于下位机版本查询
   */
  G_IM__CMD_TYPE__DEVICE_PASSTHROUGH = 56,
  /*
   * 获取设备更新数据
   */
  G_IM__CMD_TYPE__GET_DEVICE_UPDATE = 57,
  /*
   * 更新检测文件
   */
  G_IM__CMD_TYPE__DETECTIONFILE_UPDATE = 58,
  /*
   * 设置库位状态
   */
  G_IM__CMD_TYPE__SET_STOCK_STATE = 59,
  /*
   * 负压清除故障
   */
  G_IM__CMD_TYPE__NEGATIVE_PRESSURE_CLEAR_FAULT = 60,
  /*
   * 安防开关
   */
  G_IM__CMD_TYPE__SWITCH_SECURIT = 61,
  /*
   * 声光报警开关
   */
  G_IM__CMD_TYPE__SOUND_LIGHT_ALARM = 62,
  /*
   * 工装校准之下位机读取版本信息
   */
  G_IM__CMD_TYPE__ADJUST_LOWERMACHINE_VERSION_READ = 63,
  G_IM__CMD_TYPE__CMD_TYPES_MAX = 64
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__CMD_TYPE)
} GIm__CmdType;
typedef enum _GIm__CmdResult {
  /*
   * 成功
   */
  G_IM__CMD_RESULT__CMD_SUCCESS = 0,
  /*
   * 指令有误
   */
  G_IM__CMD_RESULT__CMD_NO_MATCH = 1,
  /*
   * 文件不存在
   */
  G_IM__CMD_RESULT__FILE_NOEXIST = 2,
  /*
   * 文件打开失败
   */
  G_IM__CMD_RESULT__FILE_OPEN_FAIL = 3,
  /*
   * 文件格式有误
   */
  G_IM__CMD_RESULT__FILE_FORMAT_ERR = 4,
  /*
   * 文件拷贝失败
   */
  G_IM__CMD_RESULT__FILE_COPY_FAIL = 5,
  /*
   * 文件重命名
   */
  G_IM__CMD_RESULT__FILE_RENAME_FAILE = 6,
  /*
   * 文件解析失败
   */
  G_IM__CMD_RESULT__FILE_PARSE_FAIL = 7,
  /*
   * 文件删除失败
   */
  G_IM__CMD_RESULT__FILE_DEL_FAIL = 8,
  /*
   * 文件保存失败
   */
  G_IM__CMD_RESULT__FILE_SAVE_FILE = 9,
  /*
   * 下位机通讯超时
   */
  G_IM__CMD_RESULT__LOWER_CONNECT_TIMEOUT = 11,
  /*
   * 通道号不匹配
   */
  G_IM__CMD_RESULT__CHANNEL_NO_MATCH = 12,
  /*
   * 参数非法
   */
  G_IM__CMD_RESULT__PARAM_INVALID = 13,
  /*
   * 命令无法执行（设备故障、初始化完成）
   */
  G_IM__CMD_RESULT__CMD_NO_DEAL = 14,
  /*
   * 工况文件无效
   */
  G_IM__CMD_RESULT__WORK_FILE_INVALID = 15,
  /*
   * 系统时间不对, 早于2000年1月1日
   */
  G_IM__CMD_RESULT__SYSTEM_TIME_FALSE = 16,
  /*
   * 获取自定义变量失败
   */
  G_IM__CMD_RESULT__GET_CUSTOM_VAR_FAIL = 17,
  /*
   * 中位机正在下发指令
   */
  G_IM__CMD_RESULT__IM_DEALING_CMD_TO_LOWER = 18,
  /*
   * 下位机告警
   */
  G_IM__CMD_RESULT__LOWER_ALARM = 19,
  /*
   * 密码错误
   */
  G_IM__CMD_RESULT__PASSWD_FALSE = 20,
  /*
   * 安防设置不合法
   */
  G_IM__CMD_RESULT__SECURITY_SET_INVALID = 21,
  /*
   * 通道忙
   */
  G_IM__CMD_RESULT__CHANNEL_BUSY = 22,
  /*
   * 授权时间早于系统时间
   */
  G_IM__CMD_RESULT__AUTH_TIME_INVALID = 23,
  /*
   * 超过授权次数
   */
  G_IM__CMD_RESULT__AUTH_TIMES_EXCEED = 24,
  /*
   * 超过授权时间
   */
  G_IM__CMD_RESULT__AUTH_TIME_EXCEED = 25,
  /*
   * 通道不存在
   */
  G_IM__CMD_RESULT__CHANNEL_NO_EXIST = 26,
  /*
   * 系统时间设置失败
   */
  G_IM__CMD_RESULT__SYSTIME_SET_FAIL = 27,
  /*
   * 通道迁移失败
   */
  G_IM__CMD_RESULT__CHANNEL_TRANS_FAIL = 28,
  /*
   * 工步设置不合法
   */
  G_IM__CMD_RESULT__STEP_SET_ERROR = 29,
  /*
   * 工步版本不匹配
   */
  G_IM__CMD_RESULT__STEP_VERSION_ERROR = 30,
  /*
   * 内存不足
   */
  G_IM__CMD_RESULT__IM_NO_MEMORY = 31,
  /*
   * 其他错误
   */
  G_IM__CMD_RESULT__IM_OTHER_ERR_MSG = 32,
  /*
   * 未泄压
   */
  G_IM__CMD_RESULT__NP_PRESSURE = 33,
  /*
   * 正在泄压
   */
  G_IM__CMD_RESULT__IS_PRESSURE = 34,
  /*
   * 库位在运行中
   */
  G_IM__CMD_RESULT__STOCK_RUNNING = 35
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__CMD_RESULT)
} GIm__CmdResult;
typedef enum _GIm__SysconfUpdateType {
  /*
   * 全部更新
   */
  G_IM__SYSCONF_UPDATE_TYPE__UPDATE_ALL = 0,
  /*
   * 通道配置信息更新
   */
  G_IM__SYSCONF_UPDATE_TYPE__CHANNEL_UPDATE = 1,
  /*
   * 中位机信息更新
   */
  G_IM__SYSCONF_UPDATE_TYPE__IM_INFO_UPDATE = 2,
  /*
   * eth0 信息更新
   */
  G_IM__SYSCONF_UPDATE_TYPE__ETH0_UPDATE = 3,
  /*
   * eth1 信息更新
   */
  G_IM__SYSCONF_UPDATE_TYPE__ETH1_UPDATE = 4,
  /*
   * 上位机信息更新
   */
  G_IM__SYSCONF_UPDATE_TYPE__PC_INFO_UPDATE = 5,
  /*
   * 移动网络信息更新
   */
  G_IM__SYSCONF_UPDATE_TYPE__MOBILE_UPDATE = 6,
  /*
   * 云平台信息更新
   */
  G_IM__SYSCONF_UPDATE_TYPE__CLOUD_UPDATE = 7,
  /*
   * 外围设备信息更新
   */
  G_IM__SYSCONF_UPDATE_TYPE__PeripheralsUpdate = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__SYSCONF_UPDATE_TYPE)
} GIm__SysconfUpdateType;
typedef enum _GIm__AuthType {
  /*
   * 无限制
   */
  G_IM__AUTH_TYPE__UNLIMITED = 0,
  /*
   * 根据次数授权
   */
  G_IM__AUTH_TYPE__AUTH_BY_TIMES = 1,
  /*
   * 根据时间授权
   */
  G_IM__AUTH_TYPE__AUTH_BY_TIMER = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__AUTH_TYPE)
} GIm__AuthType;
/*
 * 通道状态
 */
typedef enum _GIm__ChannelSt {
  /*
   * 就绪
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_READY = 0,
  /*
   * 充电
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_CHARGE = 1,
  /*
   * 放电
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_DISCHARGE = 2,
  /*
   * 静置
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_STEWING = 3,
  /*
   * 路谱
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_WORK_CONDITION = 4,
  /*
   * 结束OK
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_OK = 5,
  /*
   * 结束NG
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_NOK = 6,
  /*
   * 设备告警
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_DEVICE_ALARM = 7,
  /*
   * 用户终止
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_USER_TERMINATE = 8,
  /*
   * 下位机通讯错误
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_COMM_ERROR = 9,
  /*
   * 未接电池
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_NOT_CONNECT_BATTERY = 10,
  /*
   * 未启用
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_DISABLE = 11,
  /*
   * 暂停
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_PAUSE = 12,
  /*
   * 预约时间暂停
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_APPOINT_TIME_PAUSE = 13,
  /*
   * 预约工步暂停
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_APPOINT_STEP_PAUSE = 14,
  /*
   * 预约循环号暂停
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_APPOINT_LOOP_PAUSE = 15,
  /*
   * 外设通信错误
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_EXTERN_COMM_ERROR = 16,
  /*
   * 等待联动
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_WAIT_FOR_LINKAGE = 19,
  /*
   * 闲时记录
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_FREE_TIME_RECORD = 20,
  /*
   * 充电CC
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_CC = 21,
  /*
   * 充电CV
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_CV = 22,
  /*
   * 充电CC-CV
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_CCCV = 23,
  /*
   * 放电DC
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_DC = 24,
  /*
   * 校准中
   */
  G_IM__CHANNEL_ST__CHANNEL_ADJUSTING = 25,
  /*
   * 维护中
   */
  G_IM__CHANNEL_ST__CHANNEL_MAINTAINED = 26,
  /*
   * 负压暂停
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_PRESSURE_PAUSE = 29,
  /*
   * 旁路
   */
  G_IM__CHANNEL_ST__CHANNEL_ST_BYPASS = 30,
  G_IM__CHANNEL_ST__CHANNEL_ST_MAX = 99
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__CHANNEL_ST)
} GIm__ChannelSt;
/*
 * 电源通道
 */
typedef enum _GIm__PowerChannelSt {
  /*
   * 就绪
   */
  G_IM__POWER_CHANNEL_ST__POWER_CHANNEL_ST_READY = 0,
  /*
   * 运行
   */
  G_IM__POWER_CHANNEL_ST__POWER_CHANNEL_ST_RUN = 1,
  /*
   * 异常
   */
  G_IM__POWER_CHANNEL_ST__POWER_CHANNEL_ST_ABNORMAL = 2,
  /*
   * 暂停
   */
  G_IM__POWER_CHANNEL_ST__POWER_CHANNEL_ST_PAUSE = 3,
  /*
   * 锁定
   */
  G_IM__POWER_CHANNEL_ST__POWER_CHANNEL_ST_LOCK = 4,
  /*
   * 用户终止
   */
  G_IM__POWER_CHANNEL_ST__POWER_CHANNEL_ST_TERMINATE = 5,
  /*
   * 结束OK
   */
  G_IM__POWER_CHANNEL_ST__POWER_CHANNEL_ST_OK = 6,
  /*
   * 校准中
   */
  G_IM__POWER_CHANNEL_ST__POWER_CHANNEL_ADJUSTING = 7,
  /*
   * 维护中
   */
  G_IM__POWER_CHANNEL_ST__POWER_MAINTAINED = 8,
  /*
   * 负压暂停
   */
  G_IM__POWER_CHANNEL_ST__POWER__PRESSURE_PAUSE = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__POWER_CHANNEL_ST)
} GIm__PowerChannelSt;
/*
 * 通道辅助状态
 */
typedef enum _GIm__ChAssistSt {
  /*
   * 无
   */
  G_IM__CH_ASSIST_ST__CH_ASSIST_ST_NONE = 0,
  /*
   * 闲时记录
   */
  G_IM__CH_ASSIST_ST__CH_ASSIST_ST_DISPLAY_TIME = 1,
  /*
   * 闲时记录OK
   */
  G_IM__CH_ASSIST_ST__CH_ASSIST_ST_DISPLAY_TIME_OK = 2,
  /*
   * 闲时记录终止
   */
  G_IM__CH_ASSIST_ST__CH_ASSIST_ST_DISPLAY_TIME_TERMINATE = 3,
  G_IM__CH_ASSIST_ST__CH_ASSIST_ST_MAX = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__CH_ASSIST_ST)
} GIm__ChAssistSt;
/*
 * 读写EEPROM命令类型
 */
typedef enum _GIm__ImEepromType {
  /*
   * 预留值
   */
  G_IM__IM_EEPROM_TYPE__EEP_RESERVED = 0,
  /*
   * 机型
   */
  G_IM__IM_EEPROM_TYPE__EEP_MODEL = 1,
  /*
   * 通道号
   */
  G_IM__IM_EEPROM_TYPE__EEP_CHANNEL = 2,
  /*
   * 条码
   */
  G_IM__IM_EEPROM_TYPE__EEP_BARCODE = 3,
  /*
   * 采样断开时间
   */
  G_IM__IM_EEPROM_TYPE__EEP_SAMPLER_TIME = 4,
  /*
   * 数据记录间隔
   */
  G_IM__IM_EEPROM_TYPE__EEP_RECORD_INTERVAL = 5,
  /*
   * 设备配置
   */
  G_IM__IM_EEPROM_TYPE__EEP_DEVICE_CONFIG = 6,
  /*
   * 校准系数
   */
  G_IM__IM_EEPROM_TYPE__EEP_CALIBRATION = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__IM_EEPROM_TYPE)
} GIm__ImEepromType;
/*
 * 校准系数类型
 */
typedef enum _GIm__ImFatorType {
  /*
   * 预留值
   */
  G_IM__IM_FATOR_TYPE__EPP_FT_RESERVED = 0,
  /*
   * 实际值(加载值)
   */
  G_IM__IM_FATOR_TYPE__AV = 1,
  /*
   * 测量值
   */
  G_IM__IM_FATOR_TYPE__PV = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__IM_FATOR_TYPE)
} GIm__ImFatorType;
/*
 * 校准系数项目
 */
typedef enum _GIm__ImFatorOption {
  /*
   * 预留值
   */
  G_IM__IM_FATOR_OPTION__EPP_FO_RESERVED = 0,
  /*
   * 充电电压
   */
  G_IM__IM_FATOR_OPTION__CV = 1,
  /*
   * 充电电流
   */
  G_IM__IM_FATOR_OPTION__CC = 2,
  /*
   * 放电电压
   */
  G_IM__IM_FATOR_OPTION__DV = 3,
  /*
   * 放电电流
   */
  G_IM__IM_FATOR_OPTION__DC = 4,
  /*
   * 电池温度
   */
  G_IM__IM_FATOR_OPTION__BT = 5,
  /*
   * 设备温度(预留)
   */
  G_IM__IM_FATOR_OPTION__DT = 6,
  /*
   * DC_DC输入电压
   */
  G_IM__IM_FATOR_OPTION__DCDC_IN = 7,
  /*
   * DC_DC输出电压
   */
  G_IM__IM_FATOR_OPTION__DCDC_OUT = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__IM_FATOR_OPTION)
} GIm__ImFatorOption;
/*
 * 预约暂停类型
 */
typedef enum _GIm__ImAppointStopType {
  /*
   * 按工步预约暂停
   */
  G_IM__IM_APPOINT_STOP_TYPE__appoint_step_stop = 0,
  /*
   * 按循环预约暂停
   */
  G_IM__IM_APPOINT_STOP_TYPE__appoint_loop_stop = 1,
  /*
   * 按时间预约暂定
   */
  G_IM__IM_APPOINT_STOP_TYPE__appoint_time_stop = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__IM_APPOINT_STOP_TYPE)
} GIm__ImAppointStopType;
/*
 * 告警类型
 */
typedef enum _GIm__ImWarnType {
  /*
   * 来自外设的外设告警
   */
  G_IM__IM_WARN_TYPE__extern_device_warn = 0,
  /*
   * 来自中位机的外设告警
   */
  G_IM__IM_WARN_TYPE__extern_device_judge_warn = 1,
  /*
   * 来自下位机的通道告警
   */
  G_IM__IM_WARN_TYPE__channel_warn = 2,
  /*
   * 来自中位机的通道告警
   */
  G_IM__IM_WARN_TYPE__channel_judge_warn = 3,
  /*
   * 来自中位机的工步告警
   */
  G_IM__IM_WARN_TYPE__step_judge_warn = 4,
  /*
   * 来自电源的AC故障告警
   */
  G_IM__IM_WARN_TYPE__power_ac_warn = 5,
  /*
   * 来自安防故障告警
   */
  G_IM__IM_WARN_TYPE__security_warn = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__IM_WARN_TYPE)
} GIm__ImWarnType;
/*
 * 下位机告警类型
 */
typedef enum _GIm__LowerMachineWarnType {
  /*
   * 无告警
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__NO_WARN = 0,
  /*
   * DC-DC输入过压
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__DC_DC_INPUT_OVER_VOLTAGE = 1,
  /*
   * DC-DC输出过压
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__DC_DC_OUPUT_OVER_VOLTAGE = 2,
  /*
   * DC-DC输入过流
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__DC_DC_OUPUT_OVER_CURRENT = 3,
  /*
   * DC-DC过温保护
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__DC_DC_OVER_TEMP = 4,
  /*
   * DC_DC输入电压异常
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__DC_DC_INPUT_VOLTAGE_ABNORMAL = 5,
  /*
   * DC_DC输出电压异常
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__DC_DC_OUTPUT_VOLTAGE_ABNORMAL = 6,
  /*
   * AD通讯超时
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__AD_TIMEOUT = 7,
  /*
   * EEPROM通讯超时
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__EEPROM_TIMEOUT = 8,
  /*
   * 初始化失败
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__INIT_FAILED = 9,
  /*
   * 并联启动超时
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__PARALLEL_START_TIMEOUT = 10,
  /*
   * 并联关机超时
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__PARALLEL_CLOSE_TIMEOUT = 11,
  /*
   * 预充失败
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__PRECHARGE_FAILED = 12,
  /*
   * 采样线脱落
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__SAMPLE_LINE_FALL_OFF = 13,
  /*
   * 并联电路故障
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__PARALLEL_CIRCUIT_FAULT = 14,
  /*
   * 电压上限保护
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__VOLTAGE_UPPER_LIMIT_GUARD = 15,
  /*
   * 电压下限保护
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__VOLTAGE_LOWER_LIMIT_GUARD = 16,
  /*
   * 电流上限保护
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__CURRENT_UPPER_LIMIT_GUARD = 17,
  /*
   * 电流下限保护
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__CURRENT_LOWER_LIMIT_GUARD = 18,
  /*
   * 温度上限保护
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__TEMP_UPPER_LIMIT_GUARD = 19,
  /*
   * 温度下限保护
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__TEMP_LOWER_LIMIT_GUARD = 20,
  /*
   * 输出短路保护
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__OUTPUT_SHORT_CIRCUIT_GUARD = 21,
  /*
   * 电池反接
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__BATTERY_REVERSAL = 22,
  /*
   * DC_DC风机故障
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__DC_DC_FAN_FAULT = 23,
  /*
   * 电池保护或掉线
   */
  G_IM__LOWER_MACHINE_WARN_TYPE__BATTERY_GUARD_OR_DROPPED = 24
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__LOWER_MACHINE_WARN_TYPE)
} GIm__LowerMachineWarnType;
/*
 * 下位机ARM故障类型
 */
typedef enum _GIm__LowerMachineArmFaultType {
  /*
   * 无故障
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__ARM_NO_FAULT = 0,
  /*
   * 同步锁相失锁
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__LOST_LOCK = 1,
  /*
   * 同步信号丢失
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__LOST_SIGNAL = 2,
  /*
   * 同步信号频率错误
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__FREQUENCY_ERROR = 3,
  /*
   * SPI通讯断开
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__SIP_DISCONNECT = 4,
  /*
   * 断言失败
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__ASSERT_FAILED = 5,
  /*
   * ACDC模块告警
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__ACDC_WARNING = 6,
  /*
   * ARM地址冲突
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__MAC_CONFLICT = 7,
  /*
   * 启动等待超时
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__START_TIMEOUT = 8,
  /*
   * 停止等待超时
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__STOP_TIMEOUT = 9,
  /*
   * 急停保护
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__ESTOP_PROTECT = 10,
  /*
   * 同步CAN故障
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__CAN_FAULT = 11,
  /*
   * 以太网通讯故障
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__NETWORK_FAULT = 12,
  /*
   * 电芯电压采集板通讯断开
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__CELL_VOL_BOARD_COMM_FAILED = 13,
  /*
   * 极耳电压采集板通讯断开
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__EAR_VOL_BOARD_COMM_FAILED = 14,
  /*
   * ACDC通讯断开
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__AC_DC_COMM_DISCONNECT = 15,
  /*
   * 通道通讯断开
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__CHANNEL_COMM_FAILED = 32,
  /*
   * 通道工步设置出错
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__STEP_SETTING_ERROR = 33,
  /*
   * 通道电池反接
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__CHANNEL_BATTERY_REVERSAL = 34,
  /*
   * 通道电池保护或掉线
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__CHANNEL_BATTERY_GUARD_OR_DROPPED = 35,
  /*
   * 通道等待清除历史故障
   */
  G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__CHANNEL_HISTORY_FAULT = 36
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__LOWER_MACHINE_ARM_FAULT_TYPE)
} GIm__LowerMachineArmFaultType;
/*
 * 下位机通道故障类型
 */
typedef enum _GIm__LowerMachineChannelFaultType {
  /*
   * 无故障
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__CHANNEL_NO_FAULT = 0,
  /*
   * 输入电压瞬时软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input_Transient_Over_Vol = 1,
  /*
   * 输入电压1瞬时软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input1_Transient_Over_Vol = 2,
  /*
   * 输入电压2瞬时软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input2_Transient_Over_Vol = 3,
  /*
   * 输入电压3瞬时软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input3_Transient_Over_Vol = 4,
  /*
   * 输入电压4瞬时软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input4_Transient_Over_Vol = 5,
  /*
   * 输入电压瞬时软欠压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input_Transient_Under_Vol = 6,
  /*
   * 输入电压1瞬时软欠压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input1_Transient_Under_Vol = 7,
  /*
   * 输入电压2瞬时软欠压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input2_Transient_Under_Vol = 8,
  /*
   * 输入电压3瞬时软欠压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input3_Transient_Under_Vol = 9,
  /*
   * 输入电压4瞬时软欠压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input4_Transient_Under_Vol = 10,
  /*
   * 输入电压1反接
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input_Vol1_Reversal = 11,
  /*
   * 输入电压2反接
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input_Vol2_Reversal = 12,
  /*
   * 输入电压3反接
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input_Vol3_Reversal = 13,
  /*
   * 输入电压4反接
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input_Vol4_Reversal = 14,
  /*
   * 输入电压采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input_Vol_Sample_Abnormal = 15,
  /*
   * 输入电压软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input_Vol_Over_Vol = 16,
  /*
   * 输入电压反接
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Input_Vol_Reversal = 17,
  /*
   * 电感电流P瞬时软过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur_P_Transient_Over_Cur = 20,
  /*
   * 电感电流N瞬时软过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur_N_Transient_Over_Cur = 21,
  /*
   * 输出电压P软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_Vol_P_Over_Vol = 22,
  /*
   * 输出电压N软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_Vol_N_Over_Vol = 23,
  /*
   * ADC通讯故障
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__ADC_Comm_Fault = 24,
  /*
   * 输出短路
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_Short_Circuit = 25,
  /*
   * 电池电压超过电压上限
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Vol_Over_Upper_Limit = 26,
  /*
   * 电池温度超过温度上限
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Temp_Over_Upper_Limit = 27,
  /*
   * 电池电流超过电流上限
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Cur_Over_Upper_Limit = 28,
  /*
   * 电池电压低于电压下限
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Vol_Under_Lower_Limit = 29,
  /*
   * 电池电流低于电流下限
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Cur_Under_Lower_Limit = 30,
  /*
   * 输出电流不均衡
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_Cur_Unbalanced = 31,
  /*
   * 输出电压瞬时软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_Transient_Over_Vol = 32,
  /*
   * 输出电压软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_Over_Vol = 33,
  /*
   * 输出电压1软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output1_Transient_OverVol = 34,
  /*
   * 输出电压2软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output2_Over_Vol = 35,
  /*
   * 输出电压3软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output3_Over_Vol = 36,
  /*
   * 输出电压4软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output4_Over_Vol = 37,
  /*
   * 输出电压1负压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output1_Under_Pressure = 38,
  /*
   * 输出电压2负压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output2_Under_Pressure = 39,
  /*
   * 输出电压3负压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output3_Under_Pressure = 40,
  /*
   * 输出电压4负压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output4_Under_Pressure = 41,
  /*
   * 输出电压M软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_M_Over_Vol = 42,
  /*
   * 输出电压过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_Vol_Over_Vol = 43,
  /*
   * 输出电压采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_Vol_Sample_Abnormal = 47,
  /*
   * 辅助电源过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Auxiliary_Power_Over_Vol = 48,
  /*
   * 辅助电源欠压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Auxiliary_Power_Under_Vol = 49,
  /*
   * 信号线连接异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Signal_Line_Connect_Abnormal = 50,
  /*
   * 信号线异常或散热器过温
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Signal_Line_Abnormal = 51,
  /*
   * 环境温度过温
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Env_Temp_Over_Temp = 52,
  /*
   * 电池温度过温
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Battery_Temp_Over_Temp = 53,
  /*
   * 散热器过温
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Cooler_Over_Temp = 54,
  /*
   * 散热器1过温
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Cooler1_Over_Temp = 55,
  /*
   * 散热器2过温
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Cooler2_Over_Temp = 56,
  /*
   * 散热器3过温
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Cooler3_Over_Temp = 57,
  /*
   * 散热器4过温
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Cooler4_Over_Temp = 58,
  /*
   * 温度采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Temp_Sample_Abnormal = 59,
  /*
   * 板卡温度过温
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Board_Temp_Over_Temp = 60,
  /*
   * 并联通道故障
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Parallel_Channel_Fault = 61,
  /*
   * 并联通道电池电压采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Parallel_Channel_Cell_Vol_Sample_Abnormal = 62,
  /*
   * 并联通道不同步
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Parallel_Channel_Out_Sync = 63,
  /*
   * 风机故障
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Fan_Fault = 64,
  /*
   * 风机1故障
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Fan1_Fault = 65,
  /*
   * 风机2故障
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Fan2_Fault = 66,
  /*
   * 风机3故障
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Fan3_Fault = 67,
  /*
   * 风机4故障
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Fan4_Fault = 68,
  /*
   * 风机5故障
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Fan5_Fault = 69,
  /*
   * 风机6故障
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Fan6_Fault = 70,
  /*
   * PWM:电网过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Power_Grid_Over_Vol = 80,
  /*
   * PWM:电网欠压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Power_Grid_Under_Vol = 81,
  /*
   * PWM:电网频率过高
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Power_Grid_Over_Freq = 82,
  /*
   * PWM:电网频率过低
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Power_Grid_Under_Freq = 83,
  /*
   * PWM:电网过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Power_Grid_Over_Cur = 84,
  /*
   * PWM:电网瞬时软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Power_Grid_Transient_Over_Vol = 85,
  /*
   * PWM:电网掉电
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Power_Grid_Power_Down = 86,
  /*
   * PWM:电网频率检测失败
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Power_Grid_Freq_Detect_Failed = 87,
  /*
   * PWM:电网相序检测失败
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Power_Grid_Phase_Detect_Failed = 88,
  /*
   * PWM:电网三相不平衡
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Power_Grid_Phase_Unbalanced = 89,
  /*
   * PWM:电网锁相失败
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Power_Grid_Lock_Phase_Failed = 90,
  /*
   * PWM:电网相位失锁
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Power_Grid_Phase_Lost_Lock = 91,
  /*
   * PWM:电网交流侧短路
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Power_Grid_AC_Short_Circuit = 92,
  /*
   * PWM:孤岛保护
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Island_Protection = 93,
  /*
   * PWM:电感电流过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_LCur_Over_Cur = 94,
  /*
   * PWM:电感电流过载
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_LCur_Overload = 95,
  /*
   * PWM:PWM软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Soft_Over_Vol = 96,
  /*
   * PWM:PWM瞬时软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Transient_Soft_Over_Vol = 97,
  /*
   * PWM:PWM软欠压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Soft_Under_Vol = 98,
  /*
   * PWM:PWM硬过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Hard_Over_Vol = 99,
  /*
   * PWM:直流电流过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_DC_Over_Cur = 100,
  /*
   * PWM:直流电流瞬时软过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_DC_Soft_Over_Cur = 101,
  /*
   * PWM:直流电流过载
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_DC_Overload = 102,
  /*
   * PWM:PSB硬过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_PSB_Hard_Over_Vol = 103,
  /*
   * PWM:PSB瞬时软过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_PSB_Transient_Soft_Under_Vol = 104,
  /*
   * PWM:PSB软欠压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_PSB_Soft_Under_Vol = 105,
  /*
   * PWM:PSB硬过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_PSB_Hard_Over_Cur = 106,
  /*
   * PWM:PSB瞬时软过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_PSB_Transient_Soft_Over_Cur = 107,
  /*
   * PWM:PSB硬过流或硬过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_PSB_Hard_Over_Cur_OrOver_Vol = 108,
  /*
   * PWM:散热器过温
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Cooler_Over_Temp = 112,
  /*
   * PWM:散热器1过温
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Cooler1_Over_Temp = 113,
  /*
   * PWM:散热器2过温
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Cooler2_Over_Temp = 114,
  /*
   * PWM:散热器3过温
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Cooler3_Over_Temp = 115,
  /*
   * PWM:环境温度过温
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Env_Temp_Over_Tem = 116,
  /*
   * PWM:开机启动失败
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Start_Failed = 117,
  /*
   * PWM:通讯断开
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Comm_Disconnect = 118,
  /*
   * PWM:直流母线放电失败
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_WB_Dischare_Failed = 119,
  /*
   * PWM:辅助电源过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Auxiliary_Power_Over_Vol = 120,
  /*
   * PWM:辅助电源欠压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Auxiliary_Power_Under_Vol = 121,
  /*
   * PWM:直流电压采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_DC_Vol_Sample_Abnormal = 122,
  /*
   * PWM:直流电流采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_DC_Cur_Sample_Abnormal = 123,
  /*
   * PWM:交流电压采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_AC_Vol_Sample_Abnormal = 124,
  /*
   * PWM:交流电流采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_AC_Cur_Sample_Abnormal = 125,
  /*
   * PWM:DSP异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_DSP_Abnormal = 128,
  /*
   * PWM:接地异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_GND_Error = 129,
  /*
   * PWM:急停
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_EStop = 130,
  /*
   * PWM:IGBT过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_IGBT_Over_Cur = 131,
  /*
   * PWM:状态无效
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Status_Invalid = 132,
  /*
   * PWM:状态引擎无效
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Status_Engine_Invalid = 133,
  /*
   * 电感电流P硬过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur_P_Hard_Over_Cur = 160,
  /*
   * 电感电流N硬过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur_N_Hard_Over_Cur = 161,
  /*
   * 电感电流硬过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur_Hard_Over_Cur = 162,
  /*
   * 直流电流硬过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__DC_Cur_Hard_Over_Cur = 163,
  /*
   * 单管电流硬过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Single_Cur_Hard_Over_Cur = 164,
  /*
   * 电感或单管或直流电流硬过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Cur_Hard_Over_Cur = 165,
  /*
   * 直流电流瞬时软过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__DC_Cur_Transient_Over_Cur = 166,
  /*
   * 电感电流瞬时软过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur_Transient_Over_Cur = 167,
  /*
   * 电感电流1瞬时软过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur1_Transient_Over_Cur = 168,
  /*
   * 电感电流2瞬时软过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur2_Transient_Over_Cur = 169,
  /*
   * 电感电流3瞬时软过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur3_Transient_Over_Cur = 170,
  /*
   * 电感电流4瞬时软过流
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur4_Transient_Over_Cur = 171,
  /*
   * 输出电流采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_Sample_Abnormal = 174,
  /*
   * 电感电流采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur_Sample_Abnormal = 175,
  /*
   * PWM1模块报警
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM1_Comm_Alarm = 177,
  /*
   * PWM2模块报警
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM2_Comm_Alarm = 178,
  /*
   * PWM3模块报警
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM3_Comm_Alarm = 179,
  /*
   * PWM1模块通讯断开
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM1_Comm_Disconnect = 180,
  /*
   * PWM2模块通讯断开
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM2_Comm_Disconnect = 181,
  /*
   * PWM3模块通讯断开
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM3_Comm_Disconnect = 182,
  /*
   * PWM模块报警
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWB_Alarm = 183,
  /*
   * PSB模块报警
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PSB_Alarm = 184,
  /*
   * PWM模块通讯断开
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PWM_Module_Comm_Disconnect = 186,
  /*
   * PSB模块通讯断开
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__PSB_Module_Comm_Disconnect = 187,
  /*
   * DSP电芯电压采集板通讯断开
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__DSP_Cell_Vol_Sample_Comm_Failed = 188,
  /*
   * 电芯采集异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Cell_Sample_Abnormal = 189,
  /*
   * 闲时电流异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Free_Cur_Abnormal = 190,
  /*
   * 启动失败
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Start_Failed = 191,
  /*
   * EEPROM参数异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Eeprom_Param_Abnormal = 192,
  /*
   * 电池电压采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Battery_Vol_Sample_Abnormal = 193,
  /*
   * 输出缓启异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_Soft_Start_Abnormal = 194,
  /*
   * IO平衡失败
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__IO_Balace_Failed = 195,
  /*
   * 电感电流1采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur1_Sample_Abnormal = 196,
  /*
   * 电感电流2采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur2_Sample_Abnormal = 197,
  /*
   * 电感电流3采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur3_Sample_Abnormal = 198,
  /*
   * 电感电流4采样异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__LCur4_Sample_Abnormal = 199,
  /*
   * DSP失锁
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__DSP_Lost_Lock = 200,
  /*
   * 输出反接
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_Reversal = 201,
  /*
   * 输出电压P检测异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_Vol_P_Check_Abnormal = 202,
  /*
   * 输出电压N检测异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_Vol_N_Check_Abnormal = 203,
  /*
   * 单体过压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Monomer_Over_Vol = 204,
  /*
   * 单体欠压
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Monomer_Under_Vol = 205,
  /*
   * 输出预充异常
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Output_PreCharge_Abnormal = 206,
  /*
   * 占空比超限
   */
  G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__Duty_Ratio_Over_Limit = 207
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE)
} GIm__LowerMachineChannelFaultType;
/*
 * 电源工装校准模式
 */
typedef enum _GIm__AdjustPowerMode {
  /*
   * 自动并联
   */
  G_IM__ADJUST_POWER_MODE__AUTO_PARALLEL = 0,
  /*
   * 极简串联的模组电源
   */
  G_IM__ADJUST_POWER_MODE__SERIES_MODULE = 1,
  /*
   * 极简串联的电芯电源
   */
  G_IM__ADJUST_POWER_MODE__SERIES_CELL = 2,
  /*
   * 恒压串联的模组电源
   */
  G_IM__ADJUST_POWER_MODE__CV_SERIES_MODULE = 3,
  /*
   * 恒压串联的电芯电源
   */
  G_IM__ADJUST_POWER_MODE__CV_SERIES_CELL = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__ADJUST_POWER_MODE)
} GIm__AdjustPowerMode;
/*
 * 设备状态
 */
typedef enum _GIm__DeviceState {
  /*
   * 正常
   */
  G_IM__DEVICE_STATE__NORMAL = 0,
  /*
   * 异常
   */
  G_IM__DEVICE_STATE__ABNORMAL = 1,
  /*
   * 连接错误
   */
  G_IM__DEVICE_STATE__COMMNUNICATION_ERROR = 2,
  /*
   * 配置错误
   */
  G_IM__DEVICE_STATE__CONFIG_ERROR = 3,
  /*
   * 掉线
   */
  G_IM__DEVICE_STATE__DISCONNECTION = 4,
  /*
   * 堵转
   */
  G_IM__DEVICE_STATE__LOCKED_ROTOR = 5,
  /*
   * 温度异常
   */
  G_IM__DEVICE_STATE__TEMPERATURE_ABNORMAL = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__DEVICE_STATE)
} GIm__DeviceState;
/*
 * 门状态
 */
typedef enum _GIm__DoorState {
  G_IM__DOOR_STATE__DOOR_STATE_UNKNOWN = 0,
  /*
   * 开
   */
  G_IM__DOOR_STATE__DOOR_STATE_OPEN = 1,
  /*
   * 关
   */
  G_IM__DOOR_STATE__DOOR_STATE_CLOSE = 2,
  /*
   * 异物伸入
   */
  G_IM__DOOR_STATE__DOOR_STATE_FOREIGN_BODY = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__DOOR_STATE)
} GIm__DoorState;
/*
 * 维护门状态
 */
typedef enum _GIm__AccessdoorState {
  G_IM__ACCESSDOOR_STATE__ACCESSDOOR_DOOR_UNKNOWN = 0,
  /*
   * 开
   */
  G_IM__ACCESSDOOR_STATE__ACCESSDOOR_DOOR_OPEN = 1,
  /*
   * 关
   */
  G_IM__ACCESSDOOR_STATE__ACCESSDOOR_DOOR_CLOSE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__ACCESSDOOR_STATE)
} GIm__AccessdoorState;
/*
 * 托盘状态
 */
typedef enum _GIm__TrayState {
  G_IM__TRAY_STATE__TRAY_STATE_UNKNOWN = 0,
  /*
   * 未到位
   */
  G_IM__TRAY_STATE__TRAY_STATE_NOTINPLACE = 1,
  /*
   * 检测异常
   */
  G_IM__TRAY_STATE__TRAY_STATE_ABNORMAL = 6,
  /*
   * 托盘放到位
   */
  G_IM__TRAY_STATE__TRAY_STATE_PUT_IN_PLACE = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__TRAY_STATE)
} GIm__TrayState;
/*
 * 针床脱开状态
 */
typedef enum _GIm__NeedlebedState {
  G_IM__NEEDLEBED_STATE__NEEDLEBED_STATE_UNKNOWN = 0,
  /*
   * 未到位
   */
  G_IM__NEEDLEBED_STATE__NEEDLEBED_STATE_NOTINPLACE = 1,
  /*
   * 到位
   */
  G_IM__NEEDLEBED_STATE__NEEDLEBED_STATE_INPLACE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__NEEDLEBED_STATE)
} GIm__NeedlebedState;
/*
 * 消防门状态
 */
typedef enum _GIm__FiredoorState {
  G_IM__FIREDOOR_STATE__FIREDOOR_STATE_UNKNOWN = 0,
  /*
   * 开启中
   */
  G_IM__FIREDOOR_STATE__FIREDOOR_STATE_OPENING = 1,
  /*
   * 开启
   */
  G_IM__FIREDOOR_STATE__FIREDOOR_STATE_OPEN = 2,
  /*
   * 关闭中
   */
  G_IM__FIREDOOR_STATE__FIREDOOR_STATE_CLOSEING = 3,
  /*
   * 关闭
   */
  G_IM__FIREDOOR_STATE__FIREDOOR_STATE_CLOSE = 4,
  /*
   * 开启超时
   */
  G_IM__FIREDOOR_STATE__FIREDOOR_STATE_OPEN_TIMEOUT = 5,
  /*
   * 关闭超时
   */
  G_IM__FIREDOOR_STATE__FIREDOOR_STATE_CLOSE_TIMEOUT = 6,
  /*
   * 异常
   */
  G_IM__FIREDOOR_STATE__FIREDOOR_STATE_ABNORMAL = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__FIREDOOR_STATE)
} GIm__FiredoorState;
/*
 * 替罪羊状态
 */
typedef enum _GIm__ScapegoatState {
  G_IM__SCAPEGOAT_STATE__SCAPEGOAT_STATE_UNKNOWN = 0,
  /*
   * 已归位
   */
  G_IM__SCAPEGOAT_STATE__SCAPEGOAT_STATE_IN_PLACE = 1,
  /*
   * 未归位
   */
  G_IM__SCAPEGOAT_STATE__SCAPEGOAT_STATE_NOT_IN_PLACE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__SCAPEGOAT_STATE)
} GIm__ScapegoatState;
/*
 * 储液状态
 */
typedef enum _GIm__ReservoirState {
  G_IM__RESERVOIR_STATE__RESERVOIR_UNKNOWN = 0,
  /*
   * 未满
   */
  G_IM__RESERVOIR_STATE__RESERVOIR_UNDER = 1,
  /*
   * 已满
   */
  G_IM__RESERVOIR_STATE__RESERVOIR_ALREADY_FULL = 2,
  /*
   * 排液中
   */
  G_IM__RESERVOIR_STATE__RESERVOIR_DISCHARGEING = 3,
  /*
   * 排液故障
   */
  G_IM__RESERVOIR_STATE__RESERVOIR_DISCHARGE_ABNORMAL = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__RESERVOIR_STATE)
} GIm__ReservoirState;
/*
 * 负压动作
 */
typedef enum _GIm__NegativepressureAction {
  /*
   * 就绪
   */
  G_IM__NEGATIVEPRESSURE_ACTION__NEGATIVEPRESSURE_ACTION_READY = 0,
  /*
   * 测堵异常
   */
  G_IM__NEGATIVEPRESSURE_ACTION__NEGATIVEPRESSURE_ACTION_BLOCKTEST_ABNORMAL = 1,
  /*
   * 测漏异常
   */
  G_IM__NEGATIVEPRESSURE_ACTION__NEGATIVEPRESSURE_ACTION_LEAKTESTING_ABNORMAL = 2,
  /*
   * 泄真异常
   */
  G_IM__NEGATIVEPRESSURE_ACTION__NEGATIVEPRESSURE_ACTION_DISCHARGEING_ABNORMAL = 3,
  /*
   * 测堵中
   */
  G_IM__NEGATIVEPRESSURE_ACTION__NEGATIVEPRESSURE_ACTION_BLOCKTESTING = 4,
  /*
   * 测堵完成
   */
  G_IM__NEGATIVEPRESSURE_ACTION__NEGATIVEPRESSURE_ACTION_BLOCKTEST_COMPLETE = 5,
  /*
   * 测漏中
   */
  G_IM__NEGATIVEPRESSURE_ACTION__NEGATIVEPRESSURE_ACTION_LEAKTESTING = 6,
  /*
   * 测漏完成
   */
  G_IM__NEGATIVEPRESSURE_ACTION__NEGATIVEPRESSURE_ACTION_LEAKTESTING_COMPLETE = 7,
  /*
   * 泄真空中
   */
  G_IM__NEGATIVEPRESSURE_ACTION__NEGATIVEPRESSURE_ACTION_DISCHARGEING = 8,
  /*
   * 泄真空完成
   */
  G_IM__NEGATIVEPRESSURE_ACTION__NEGATIVEPRESSURE_ACTION_DISCHARGEING_COMPLETE = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__NEGATIVEPRESSURE_ACTION)
} GIm__NegativepressureAction;
/*
 * 负压操作明细
 */
typedef enum _GIm__NegativepressureOperationItems {
  /*
   * 正常
   */
  G_IM__NEGATIVEPRESSURE_OPERATION_ITEMS__NEGATIVEPRESSURE_FAIL_ITEMS_NORMAL = 0,
  /*
   * 设置负压阀失败
   */
  G_IM__NEGATIVEPRESSURE_OPERATION_ITEMS__NEGATIVEPRESSURE_FAIL_ITEMS_SET_FAIL = 1,
  /*
   * 打开吸真空阀失败
   */
  G_IM__NEGATIVEPRESSURE_OPERATION_ITEMS__NEGATIVEPRESSURE_FAIL_ITEMS_Suction_Fail = 2,
  /*
   * 关闭吸真空阀失败
   */
  G_IM__NEGATIVEPRESSURE_OPERATION_ITEMS__NEGATIVEPRESSURE_FAIL_ITEMS_Close_Suction_Fail = 3,
  /*
   * 打开破真空阀失败
   */
  G_IM__NEGATIVEPRESSURE_OPERATION_ITEMS__NEGATIVEPRESSURE_FAIL_ITEMS_Open_Breaked_Fail = 4,
  /*
   * 关闭破真空阀失败
   */
  G_IM__NEGATIVEPRESSURE_OPERATION_ITEMS__NEGATIVEPRESSURE_FAIL_ITEMS_Close_Breaked_Fail = 5,
  /*
   * 读取负压阀失败
   */
  G_IM__NEGATIVEPRESSURE_OPERATION_ITEMS__NEGATIVEPRESSURE_FAIL_ITEMS_Res_Read_Fail = 6,
  /*
   * 负压值判断失败
   */
  G_IM__NEGATIVEPRESSURE_OPERATION_ITEMS__NEGATIVEPRESSURE_FAIL_ITEMS_Judge_Fail = 7,
  /*
   * 负压漏率判断失败
   */
  G_IM__NEGATIVEPRESSURE_OPERATION_ITEMS__NEGATIVEPRESSURE_FAIL_ITEMS_Judge_Leakage_Rate_Fail = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__NEGATIVEPRESSURE_OPERATION_ITEMS)
} GIm__NegativepressureOperationItems;
/*
 * 安防复位状态
 */
typedef enum _GIm__SerucrityResetState {
  /*
   * 正常
   */
  G_IM__SERUCRITY_RESET_STATE__SERUCRITY_NORMAL = 0,
  /*
   * 等待复位
   */
  G_IM__SERUCRITY_RESET_STATE__SERUCRITY_WAITING_RESET = 1,
  /*
   * 已复位
   */
  G_IM__SERUCRITY_RESET_STATE__SECONDARY_HAS_RESET = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__SERUCRITY_RESET_STATE)
} GIm__SerucrityResetState;
/*
 * 二级安防触发结果状态
 */
typedef enum _GIm__SecondarySecurityResultState {
  /*
   * 未触发
   */
  G_IM__SECONDARY_SECURITY_RESULT_STATE__SECONDARY_SECURITY_RESULT_STATE_NOT_TRIGGER = 0,
  /*
   * 触发成功
   */
  G_IM__SECONDARY_SECURITY_RESULT_STATE__SECONDARY_SECURITY_RESULT_STATE_TRIGGER_SUCCESS = 1,
  /*
   * 触发失败
   */
  G_IM__SECONDARY_SECURITY_RESULT_STATE__SECONDARY_SECURITY_RESULT_STATE_TRIGGER_FAIL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__SECONDARY_SECURITY_RESULT_STATE)
} GIm__SecondarySecurityResultState;
/*
 * PLC状态
 */
typedef enum _GIm__PlcStatus {
  G_IM__PLC_STATUS__PLC_STATUS_UNKNOWN = 0,
  /*
   * 正常
   */
  G_IM__PLC_STATUS__PLC_STATUS_NORMAL = 1,
  /*
   * 异常
   */
  G_IM__PLC_STATUS__PLC_STATUS_ABNORMAL = 2,
  /*
   * 急停
   */
  G_IM__PLC_STATUS__PLC_STATUS_ESTOP = 4,
  /*
   * 初上电
   */
  G_IM__PLC_STATUS__PLC_STATUS_POWERON = 5,
  /*
   * 收到消防动作
   */
  G_IM__PLC_STATUS__PLC_STATUS_FIRE_FIGHTING = 6,
  /*
   * 未复位
   */
  G_IM__PLC_STATUS__PLC_STATUS_NOT_RESET = 7,
  /*
   * 单步
   */
  G_IM__PLC_STATUS__PLC_STATUS_SINGLE_STEP = 8,
  /*
   * 通信异常
   */
  G_IM__PLC_STATUS__PLC_STATUS_COMMNUNICATION_ABNORMAL = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__PLC_STATUS)
} GIm__PlcStatus;
/*
 * 下位机状态
 */
typedef enum _GIm__LowercomputerStatus {
  G_IM__LOWERCOMPUTER_STATUS__LOWERCOMPUTER_STATUS_UNKNOWN = 0,
  /*
   * 与DCDC通讯异常
   */
  G_IM__LOWERCOMPUTER_STATUS__LOWERCOMPUTER_STATUS_DCDC_ABNORMAL = 1,
  /*
   * 与恒压模块通讯异常
   */
  G_IM__LOWERCOMPUTER_STATUS__LOWERCOMPUTER_STATUS_CP_MODULE_ABNORMAL = 2,
  /*
   * 与采集模块通讯异常
   */
  G_IM__LOWERCOMPUTER_STATUS__LOWERCOMPUTER_STATUS_COLLECT_MODULE_ABNORMA = 3,
  /*
   * DCDC电流超限
   */
  G_IM__LOWERCOMPUTER_STATUS__LOWERCOMPUTER_STATUS_DCDC_MODULE_IOVER = 4,
  /*
   * 恒压模块电流超限
   */
  G_IM__LOWERCOMPUTER_STATUS__LOWERCOMPUTER_STATUS_DCDC_MODULE_IOVERL = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__LOWERCOMPUTER_STATUS)
} GIm__LowercomputerStatus;
/*
 * 库位模式
 */
typedef enum _GIm__StockModel {
  G_IM__STOCK_MODEL__STOCK_MODEL_UNKNOWN = 0,
  /*
   * 自动
   */
  G_IM__STOCK_MODEL__STOCK_MODEL_AUTO = 1,
  /*
   * 手动
   */
  G_IM__STOCK_MODEL__STOCK_MODEL_MANUAL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__STOCK_MODEL)
} GIm__StockModel;
/*
 * 安防运行状态
 */
typedef enum _GIm__SecurityRuningState {
  /*
   * 启用
   */
  G_IM__SECURITY_RUNING_STATE__SECURITY_STATE_ENABLE = 0,
  /*
   * 禁用
   */
  G_IM__SECURITY_RUNING_STATE__SECURITY_STATE_DISABLE = 1,
  /*
   * 部分禁用
   */
  G_IM__SECURITY_RUNING_STATE__SECURITY_STATE_DISABLESOME = 2,
  /*
   * 组合未复位，非禁用下
   */
  G_IM__SECURITY_RUNING_STATE__SECURITY_STATE_NORESET = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__SECURITY_RUNING_STATE)
} GIm__SecurityRuningState;
/*
 * 电动球阀状态
 */
typedef enum _GIm__ElectricBallValveState {
  G_IM__ELECTRIC_BALL_VALVE_STATE__ELECTRIC_BALL_VALVE_STATE_UNKNOWN = 0,
  /*
   * 关闭
   */
  G_IM__ELECTRIC_BALL_VALVE_STATE__ELECTRIC_BALL_VALVE_STATE_CLOSE = 1,
  /*
   * 打开
   */
  G_IM__ELECTRIC_BALL_VALVE_STATE__ELECTRIC_BALL_VALVE_STATE_OPEN = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__ELECTRIC_BALL_VALVE_STATE)
} GIm__ElectricBallValveState;
/*
 * 设备升级状态
 */
typedef enum _GIm__DevieceUpdateStatus {
  /*
   * 成功
   */
  G_IM__DEVIECE_UPDATE_STATUS__UPDATE_STATUS_SUCCESS = 0,
  /*
   * 失败
   */
  G_IM__DEVIECE_UPDATE_STATUS__UPDATE_STATUS_FAIL = 1,
  /*
   * 升级中
   */
  G_IM__DEVIECE_UPDATE_STATUS__UPDATE_STATUS_RUNNING = 2,
  /*
   * 未知状态
   */
  G_IM__DEVIECE_UPDATE_STATUS__UPDATE_STATUS_UNKNOWN = 100
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__DEVIECE_UPDATE_STATUS)
} GIm__DevieceUpdateStatus;
/*
 * 设备升级错误码
 */
typedef enum _GIm__DevieceUpdateErrorcode {
  /*
   * 未知原因
   */
  G_IM__DEVIECE_UPDATE_ERRORCODE__UPDATE_RESULT_UNKNOWN = 0,
  /*
   * 文件校验错误
   */
  G_IM__DEVIECE_UPDATE_ERRORCODE__UPDATE_RESULT_FILECHECK_ERROR = 1,
  /*
   * 下位机超时
   */
  G_IM__DEVIECE_UPDATE_ERRORCODE__UPDATE_RESULT_LINK_OVERTIME = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__DEVIECE_UPDATE_ERRORCODE)
} GIm__DevieceUpdateErrorcode;
/*
 * 设备更新类型
 */
typedef enum _GIm__DeviceUpgradeType {
  /*
   * 未知状态
   */
  G_IM__DEVICE_UPGRADE_TYPE__DEVICE_UPDATE_UNKNOWN = 0,
  /*
   * 升级结束
   */
  G_IM__DEVICE_UPGRADE_TYPE__DEVICE_UPDATE_END = 1,
  /*
   * 设备升级过程——中位机完成一个下位机的升级后，进行升级状态上报
   */
  G_IM__DEVICE_UPGRADE_TYPE__DEVICE_UPDATE_RUN = 2,
  /*
   * 升级心跳
   */
  G_IM__DEVICE_UPGRADE_TYPE__DEVICE_UPDATE_HEARTBEAT = 3,
  /*
   * 获取下位版本
   */
  G_IM__DEVICE_UPGRADE_TYPE__DEVICE_GET_VERSION = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__DEVICE_UPGRADE_TYPE)
} GIm__DeviceUpgradeType;
/*
 * 安防传输模式
 */
typedef enum _GIm__SecurityTransferModel {
  /*
   * 仅状态变化
   */
  G_IM__SECURITY_TRANSFER_MODEL__ONLY_STATE_CHANGE = 0,
  /*
   * 实时
   */
  G_IM__SECURITY_TRANSFER_MODEL__REAL_TIME = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__SECURITY_TRANSFER_MODEL)
} GIm__SecurityTransferModel;
/*
 * 工装类型
 */
typedef enum _GIm__WorkjustType {
  /*
   * 未知
   */
  G_IM__WORKJUST_TYPE__WORKJUST_TYPE_UNKNOWN = 0,
  /*
   * 温度工装
   */
  G_IM__WORKJUST_TYPE__WORKJUST_TYPE_TEMPERATURE = 1,
  /*
   * 线序工装
   */
  G_IM__WORKJUST_TYPE__WORKJUST_TYPE_LINESEQUENCE = 2,
  /*
   * 精度工装
   */
  G_IM__WORKJUST_TYPE__WORKJUST_TYPE_ACCURACY = 3,
  /*
   * 线序测漏工装
   */
  G_IM__WORKJUST_TYPE__WORKJUST_TYPE_LINESEQUENCELEAKDETECTION = 4,
  /*
   * 测漏工装（电源）
   */
  G_IM__WORKJUST_TYPE__WORKJUST_TYPE_POWERLEAKDETECTION = 5,
  /*
   * 化成定位工装
   */
  G_IM__WORKJUST_TYPE__WORKJUST_TYPE_LOCATEFS = 31,
  /*
   * 拔吸嘴工装
   */
  G_IM__WORKJUST_TYPE__WORKJUST_TYPE_UnplugNozzle = 32,
  /*
   * 插吸嘴工装
   */
  G_IM__WORKJUST_TYPE__WORKJUST_TYPE_PlugNozzle = 33,
  /*
   * 负压流量工装
   */
  G_IM__WORKJUST_TYPE__WORKJUST_TYPE_NegativePressureFlow = 34,
  /*
   * 清洗负压杯工装
   */
  G_IM__WORKJUST_TYPE__WORKJUST_TYPE_CleanNegativePressureCup = 35,
  /*
   * 容量定位工装
   */
  G_IM__WORKJUST_TYPE__WORKJUST_TYPE_LocateGs = 36,
  /*
   * 测漏工装
   */
  G_IM__WORKJUST_TYPE__WORKJUST_TYPE_LeakDetection = 37
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__WORKJUST_TYPE)
} GIm__WorkjustType;
/*
 * 库位状态
 */
typedef enum _GIm__StockState {
  /*
   * 禁用
   */
  G_IM__STOCK_STATE__STOCK_STATE_DISABLE = 0,
  /*
   * 自动
   */
  G_IM__STOCK_STATE__STOCK_STATE_AUTO = 1,
  /*
   * 维护
   */
  G_IM__STOCK_STATE__STOCK_STATE_MAINTAINED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__STOCK_STATE)
} GIm__StockState;
/*
 * 执行结果
 */
typedef enum _GIm__ExecuteResult {
  /*
   * 成功
   */
  G_IM__EXECUTE_RESULT__SUCCESS = 0,
  /*
   * 失败
   */
  G_IM__EXECUTE_RESULT__FAIL = 1,
  /*
   * 用户取消
   */
  G_IM__EXECUTE_RESULT__CANCEL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__EXECUTE_RESULT)
} GIm__ExecuteResult;
/*
 * 负压阀命令类型
 */
typedef enum _GIm__NegativePressureCmdType {
  /*
   * 负压阀开始测试
   */
  G_IM__NEGATIVE_PRESSURE_CMD_TYPE__NEGATIVE_PRESSURE_CMD_TYPE_START = 0,
  /*
   * 负压阀停止测试
   */
  G_IM__NEGATIVE_PRESSURE_CMD_TYPE__NEGATIVE_PRESSURE_CMD_TYPE_STOP = 1,
  /*
   * 读取负压阀测试结果
   */
  G_IM__NEGATIVE_PRESSURE_CMD_TYPE__NEGATIVE_PRESSURE_CMD_TYPE_READ_TEST_RES = 2,
  /*
   * 打开负压阀
   */
  G_IM__NEGATIVE_PRESSURE_CMD_TYPE__NEGATIVE_PRESSURE_CMD_TYPE_OPEN = 3,
  /*
   * 关闭负压阀
   */
  G_IM__NEGATIVE_PRESSURE_CMD_TYPE__NEGATIVE_PRESSURE_CMD_TYPE_CLOSE = 4,
  /*
   * 读取负压值
   */
  G_IM__NEGATIVE_PRESSURE_CMD_TYPE__NEGATIVE_PRESSURE_CMD_TYPE_READ = 5,
  /*
   * 设置负压值
   */
  G_IM__NEGATIVE_PRESSURE_CMD_TYPE__NEGATIVE_PRESSURE_CMD_TYPE_SET = 6,
  /*
   * 泄压
   */
  G_IM__NEGATIVE_PRESSURE_CMD_TYPE__NEGATIVE_PRESSURE_CMD_TYPE_DECOMPRESSION = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__NEGATIVE_PRESSURE_CMD_TYPE)
} GIm__NegativePressureCmdType;
/*
 * 负压阀操作结果值
 */
typedef enum _GIm__NegativePressureOpRes {
  /*
   * 成功
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_SUCC = 0,
  /*
   * 设置负压阀失败
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_SET_FAIL = 1,
  /*
   * 打开负压吸真空阀失败
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_OPEN_SUCTION_FAIL = 2,
  /*
   * 关闭负压吸真空阀失败
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_CLOSE_SUCTION_FAIL = 3,
  /*
   * 打开负压破真空阀失败
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_OPEN_BREAKED_FAIL = 4,
  /*
   * 关闭负压破真空阀失败
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_CLOSE_BREAKED_FAIL = 5,
  /*
   * 读取负压值失败
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_READ_FAIL = 6,
  /*
   * 测试中
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_TESTING = 7,
  /*
   * 测试失败
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_TEST_FAIL = 8,
  /*
   * 负压阀泄漏
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_LEAKAGE = 9,
  /*
   * 通信超时
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_TIMEOUT = 10,
  /*
   * 负压值判断失败
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_JUDGE_FAIL = 11,
  /*
   * 负压漏率判断失败
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_JUDGE_LEAKAGE_RATE_FAIL = 12,
  /*
   * 测堵中
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_PLUGGING = 13,
  /*
   * 测漏中
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_LEAKAGING = 14,
  /*
   * 泄压中
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_DECOMPRESSING = 15,
  /*
   * 泄压失败
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_DECOMPRESSION_FAIL = 16,
  /*
   * 命令无效
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_CMD_INVALID = 17,
  /*
   * 负压配置文件不存在
   */
  G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_CONFIG_FILE_NOT_EXIST = 18
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__NEGATIVE_PRESSURE_OP_RES)
} GIm__NegativePressureOpRes;
/*
 * 负压真空阀类型
 */
typedef enum _GIm__NegativePressureVacuumValveType {
  /*
   * 吸真空阀
   */
  G_IM__NEGATIVE_PRESSURE_VACUUM_VALVE_TYPE__NEGATIVE_PRESSURE_VACUUM_VALVE_TYPE_SUCTION = 0,
  /*
   * 破真空阀
   */
  G_IM__NEGATIVE_PRESSURE_VACUUM_VALVE_TYPE__NEGATIVE_PRESSURE_VACUUM_VALVE_TYPE_BREAKED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__NEGATIVE_PRESSURE_VACUUM_VALVE_TYPE)
} GIm__NegativePressureVacuumValveType;
/*
 * 下位机芯片类型
 */
typedef enum _GIm__VersionQueryChipType {
  /*
   * 未知
   */
  G_IM__VERSION_QUERY_CHIP_TYPE__VERSION_QUERY_CHIP_TYPE_UNKNOWN = 0,
  /*
   * ARM
   */
  G_IM__VERSION_QUERY_CHIP_TYPE__VERSION_QUERY_CHIP_TYPE_ARM = 1,
  /*
   * DSP
   */
  G_IM__VERSION_QUERY_CHIP_TYPE__VERSION_QUERY_CHIP_TYPE_DSP = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__VERSION_QUERY_CHIP_TYPE)
} GIm__VersionQueryChipType;
/*
 * 下位机查询类型
 */
typedef enum _GIm__VersionQueryType {
  /*
   * 未知
   */
  G_IM__VERSION_QUERY_TYPE__VERSION_QUERY_TYPE_UNKNOWN = 0,
  /*
   * 查询版本
   */
  G_IM__VERSION_QUERY_TYPE__VERSION_QUERY_TYPE_APP_VERSION = 1,
  /*
   * 查询程序名称
   */
  G_IM__VERSION_QUERY_TYPE__VERSION_QUERY_TYPE_APP_NAME = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(G_IM__VERSION_QUERY_TYPE)
} GIm__VersionQueryType;

/* --- messages --- */

/*
 * 消息头
 */
struct  _GIm__ImCmdHead
{
  ProtobufCMessage base;
  /*
   * 命令魔数
   */
  protobuf_c_boolean has_magic;
  int32_t magic;
  /*
   * 序列号
   */
  protobuf_c_boolean has_seq_num;
  int32_t seq_num;
  /*
   * 命令
   */
  protobuf_c_boolean has_op;
  GIm__CmdType op;
};
#define G_IM__IM_CMD_HEAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_cmd_head__descriptor) \
    , 0, 0, 0, 0, 0, G_IM__CMD_TYPE__BOARDCAST }


/*
 * 授权参数
 */
struct  _GIm__ImAuth
{
  ProtobufCMessage base;
  /*
   * 授权类型
   */
  protobuf_c_boolean has_type;
  GIm__AuthType type;
  /*
   * 授权次数
   */
  protobuf_c_boolean has_auth_times;
  int32_t auth_times;
  /*
   * 授权到期时间的年
   */
  protobuf_c_boolean has_auth_year;
  int32_t auth_year;
  /*
   * 授权到期时间的月
   */
  protobuf_c_boolean has_auth_month;
  int32_t auth_month;
  /*
   * 授权到期时间的日
   */
  protobuf_c_boolean has_auth_day;
  int32_t auth_day;
  protobuf_c_boolean has_auth_start_time;
  int64_t auth_start_time;
};
#define G_IM__IM_AUTH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_auth__descriptor) \
    , 0, G_IM__AUTH_TYPE__UNLIMITED, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * 按单元设置数据存储
 */
struct  _GIm__ImDataStore4unit
{
  ProtobufCMessage base;
  /*
   * true,开启
   */
  protobuf_c_boolean has_enable;
  protobuf_c_boolean enable;
  /*
   * 库位列表
   */
  size_t n_unit_num;
  int32_t *unit_num;
};
#define G_IM__IM_DATA_STORE4UNIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_data_store4unit__descriptor) \
    , 0, 0, 0,NULL }


/*
 * 警告日志配置
 */
struct  _GIm__ImDataStore4alarm
{
  ProtobufCMessage base;
  protobuf_c_boolean has_enable;
  protobuf_c_boolean enable;
  /*
   * 时间间隔
   */
  protobuf_c_boolean has_interval;
  int32_t interval;
  /*
   * 时长
   */
  protobuf_c_boolean has_time;
  int32_t time;
};
#define G_IM__IM_DATA_STORE4ALARM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_data_store4alarm__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


/*
 * 烟感明细项
 */
struct  _GIm__SmokeItem
{
  ProtobufCMessage base;
  /*
   * 烟感编号
   */
  protobuf_c_boolean has_smoke_id;
  int32_t smoke_id;
  /*
   * 烟感状态
   */
  protobuf_c_boolean has_smoke_state;
  GIm__DeviceState smoke_state;
};
#define G_IM__SMOKE_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__smoke_item__descriptor) \
    , 0, 0, 0, G_IM__DEVICE_STATE__NORMAL }


/*
 * 烟感数据
 */
struct  _GIm__SmokeData
{
  ProtobufCMessage base;
  /*
   * 烟感状态
   */
  protobuf_c_boolean has_state;
  GIm__DeviceState state;
  /*
   * 烟感明细项
   */
  size_t n_smoke_item;
  GIm__SmokeItem **smoke_item;
};
#define G_IM__SMOKE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__smoke_data__descriptor) \
    , 0, G_IM__DEVICE_STATE__NORMAL, 0,NULL }


/*
 * CO明细项
 */
struct  _GIm__ImCoItem
{
  ProtobufCMessage base;
  /*
   * CO编号
   */
  protobuf_c_boolean has_co_id;
  int32_t co_id;
  /*
   * CO状态
   */
  protobuf_c_boolean has_co_state;
  GIm__DeviceState co_state;
  /*
   * 溶度
   */
  protobuf_c_boolean has_solubility;
  float solubility;
};
#define G_IM__IM_CO_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_co_item__descriptor) \
    , 0, 0, 0, G_IM__DEVICE_STATE__NORMAL, 0, 0 }


/*
 * CO数据
 */
struct  _GIm__ImCoData
{
  ProtobufCMessage base;
  /*
   * CO状态
   */
  protobuf_c_boolean has_state;
  GIm__DeviceState state;
  /*
   * CO明细项
   */
  size_t n_im_co_item;
  GIm__ImCoItem **im_co_item;
};
#define G_IM__IM_CO_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_co_data__descriptor) \
    , 0, G_IM__DEVICE_STATE__NORMAL, 0,NULL }


/*
 * 每风机数据
 */
struct  _GIm__ImFanItem
{
  ProtobufCMessage base;
  /*
   * 风机编号
   */
  protobuf_c_boolean has_fan_id;
  int32_t fan_id;
  /*
   * 风机状态
   */
  protobuf_c_boolean has_fan_state;
  GIm__DeviceState fan_state;
};
#define G_IM__IM_FAN__ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_fan__item__descriptor) \
    , 0, 0, 0, G_IM__DEVICE_STATE__NORMAL }


/*
 * 风机数据
 */
struct  _GIm__ImFanData
{
  ProtobufCMessage base;
  /*
   * 风机状态
   */
  protobuf_c_boolean has_state;
  GIm__DeviceState state;
  /*
   * 风机明细项
   */
  size_t n_fan_item;
  GIm__ImFanItem **fan_item;
};
#define G_IM__IM_FAN_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_fan_data__descriptor) \
    , 0, G_IM__DEVICE_STATE__NORMAL, 0,NULL }


/*
 * 每温度数据
 */
struct  _GIm__ImTempItem
{
  ProtobufCMessage base;
  /*
   * 编号
   */
  protobuf_c_boolean has_temp_id;
  int32_t temp_id;
  /*
   * 温度值
   */
  protobuf_c_boolean has_temp_value;
  float temp_value;
  /*
   * 温度状态
   */
  protobuf_c_boolean has_state;
  GIm__DeviceState state;
};
#define G_IM__IM_TEMP_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_temp_item__descriptor) \
    , 0, 0, 0, 0, 0, G_IM__DEVICE_STATE__NORMAL }


/*
 * 温度数据
 */
struct  _GIm__EnvTempData
{
  ProtobufCMessage base;
  /*
   * 温度状态
   */
  protobuf_c_boolean has_state;
  GIm__DeviceState state;
  /*
   * 温度明细数据
   */
  size_t n_temp_detail;
  GIm__ImTempItem **temp_detail;
};
#define G_IM__ENV_TEMP_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__env_temp_data__descriptor) \
    , 0, G_IM__DEVICE_STATE__NORMAL, 0,NULL }


/*
 * 负压系统数据
 */
struct  _GIm__NegativepressureData
{
  ProtobufCMessage base;
  /*
   * 状态
   */
  protobuf_c_boolean has_state;
  GIm__DeviceState state;
  /*
   * 负压编号
   */
  protobuf_c_boolean has_negativepressure_id;
  int32_t negativepressure_id;
  /*
   * 负压数值
   */
  protobuf_c_boolean has_negativepressure_value;
  float negativepressure_value;
  /*
   * 负压告警数据
   */
  size_t n_negativepressure_alarm_data;
  GIm__AlarmSetParamData **negativepressure_alarm_data;
  /*
   * 负压动作
   */
  protobuf_c_boolean has_negativepressure_action;
  GIm__NegativepressureAction negativepressure_action;
  /*
   * 负压操作明细
   */
  protobuf_c_boolean has_negativepressure_operation_items;
  GIm__NegativepressureOperationItems negativepressure_operation_items;
};
#define G_IM__NEGATIVEPRESSURE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__negativepressure_data__descriptor) \
    , 0, G_IM__DEVICE_STATE__NORMAL, 0, 0, 0, 0, 0,NULL, 0, G_IM__NEGATIVEPRESSURE_ACTION__NEGATIVEPRESSURE_ACTION_READY, 0, G_IM__NEGATIVEPRESSURE_OPERATION_ITEMS__NEGATIVEPRESSURE_FAIL_ITEMS_NORMAL }


/*
 * 安防参数数据
 */
struct  _GIm__AlarmParamData
{
  ProtobufCMessage base;
  /*
   * 参数ID
   */
  protobuf_c_boolean has_param_id;
  int32_t param_id;
  /*
   * 参数值
   */
  protobuf_c_boolean has_param_value;
  float param_value;
  /*
   * 单位名称
   */
  char *unit_name;
  /*
   * 告警时间(时间戳)
   */
  protobuf_c_boolean has_alarm_time;
  int64_t alarm_time;
};
#define G_IM__ALARM_PARAM_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__alarm_param_data__descriptor) \
    , 0, 0, 0, 0, NULL, 0, 0 }


/*
 * 安防设置参数数据
 */
struct  _GIm__AlarmSetParamData
{
  ProtobufCMessage base;
  /*
   * 参数名
   */
  char *param_name;
  /*
   * 参数值
   */
  protobuf_c_boolean has_param_value;
  float param_value;
};
#define G_IM__ALARM_SET_PARAM_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__alarm_set_param_data__descriptor) \
    , NULL, 0, 0 }


/*
 *安防告警数据
 */
struct  _GIm__SerucrityAlarmData
{
  ProtobufCMessage base;
  /*
   * 告警代码 V01 T01等等 All 代表所有告警
   */
  char *alarm_code;
  /*
   * 告警参数列表
   */
  size_t n_alarm_param_data;
  GIm__AlarmParamData **alarm_param_data;
  /*
   * 告警设置参数列表
   */
  size_t n_alarm_set_param_data;
  GIm__AlarmSetParamData **alarm_set_param_data;
};
#define G_IM__SERUCRITY_ALARM_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__serucrity_alarm_data__descriptor) \
    , NULL, 0,NULL, 0,NULL }


/*
 * 安防组合告警数据
 */
struct  _GIm__SerucrityCombinationAlarmData
{
  ProtobufCMessage base;
  /*
   * 规则名称列表
   */
  char *rule_name;
  /*
   * 执行动作列表
   */
  char *action_name;
  /*
   * 告警时间(时间戳)
   */
  protobuf_c_boolean has_alarm_time;
  int64_t alarm_time;
  /*
   * 安防复位状态
   */
  protobuf_c_boolean has_reset_state;
  GIm__SerucrityResetState reset_state;
  /*
   * 二级安防复位状态
   */
  protobuf_c_boolean has_secondary_reset_state;
  GIm__SerucrityResetState secondary_reset_state;
  /*
   * 二级安防触发结果
   */
  protobuf_c_boolean has_secondary_security_result;
  GIm__SecondarySecurityResultState secondary_security_result;
  /*
   * 二级安防触发时间
   */
  protobuf_c_boolean has_secondary_security_time;
  int64_t secondary_security_time;
};
#define G_IM__SERUCRITY_COMBINATION_ALARM_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__serucrity_combination_alarm_data__descriptor) \
    , NULL, NULL, 0, 0, 0, G_IM__SERUCRITY_RESET_STATE__SERUCRITY_NORMAL, 0, G_IM__SERUCRITY_RESET_STATE__SERUCRITY_NORMAL, 0, G_IM__SECONDARY_SECURITY_RESULT_STATE__SECONDARY_SECURITY_RESULT_STATE_NOT_TRIGGER, 0, 0 }


/*
 * 下位机数据
 */
struct  _GIm__LowercomputerData
{
  ProtobufCMessage base;
  /*
   * 告警时间
   */
  protobuf_c_boolean has_abnormal_time;
  int64_t abnormal_time;
  /*
   * 下位机状态
   */
  protobuf_c_boolean has_lowercomputer_status;
  GIm__LowercomputerStatus lowercomputer_status;
};
#define G_IM__LOWERCOMPUTER_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__lowercomputer_data__descriptor) \
    , 0, 0, 0, G_IM__LOWERCOMPUTER_STATUS__LOWERCOMPUTER_STATUS_UNKNOWN }


/*
 *一个库位的安全故障用8个字节表示
 *安全故障的位域说明
 *0.0     库位运行中维护门开合检测异常
 *0.1     触摸屏急停
 *0.2     库位排液后液位传感器仍告警
 *0.3     库位运行中库位门异物检测1异常
 *0.4     库位运行中库位门异物检测2异常
 *0.5     急停触发
 *0.6     气源压力异常
 *0.7     库位库位门开合检测异常
 *1.0     库位托盘到位检测异常
 *1.1     库位托盘提升到位检测异常
 *1.2     库位托盘放反告警
 *1.3     库位托盘歪斜告警
 *1.4     库位PLC收到安防脱压床信号
 *1.5     库位PLC收到安防脱停风机信号
 *1.6     库位PLC收到安防关消防门信号
 *1.7     中位机心跳丢失
 *2.0     上位机反馈1230已喷淋信号
 *2.1     IO反馈1230通过已喷淋信号
 *2.2     交互柜心跳丢失
 *2.3     未检测到替罪羊
 *2.4     气源压力抖动
 *2.5     托盘信号抖动
 */
struct  _GIm__PlcFailureData
{
  ProtobufCMessage base;
  /*
   * 提示信息
   */
  protobuf_c_boolean has_plc_message;
  int64_t plc_message;
  /*
   * 一般故障
   */
  protobuf_c_boolean has_general_failure;
  int64_t general_failure;
  /*
   * 安全故障
   */
  protobuf_c_boolean has_security_failure;
  int64_t security_failure;
};
#define G_IM__PLC_FAILURE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__plc_failure_data__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


/*
 * 每库位安防数据
 */
struct  _GIm__ImStockSecurityInfo
{
  ProtobufCMessage base;
  /*
   * 库位号
   */
  protobuf_c_boolean has_stock_no;
  int32_t stock_no;
  /*
   * 库位门状态
   */
  protobuf_c_boolean has_stockdoor_state;
  GIm__DoorState stockdoor_state;
  /*
   * 托盘状态
   */
  protobuf_c_boolean has_tray_state;
  GIm__TrayState tray_state;
  /*
   * 维护门状态
   */
  protobuf_c_boolean has_accessdoor_state;
  GIm__AccessdoorState accessdoor_state;
  /*
   * 消防门状态
   */
  protobuf_c_boolean has_firedoor_state;
  GIm__FiredoorState firedoor_state;
  /*
   * 针床脱开状态
   */
  protobuf_c_boolean has_needlebed_out_state;
  GIm__NeedlebedState needlebed_out_state;
  /*
   * 针床压合状态
   */
  protobuf_c_boolean has_needlebed_press_state;
  GIm__NeedlebedState needlebed_press_state;
  /*
   * 替罪羊归位状态
   */
  protobuf_c_boolean has_scapegoat_state;
  GIm__ScapegoatState scapegoat_state;
  /*
   * 烟感数据
   */
  GIm__SmokeData *smoke_data;
  /*
   * 储液罐状态
   */
  protobuf_c_boolean has_reservoir_state;
  GIm__ReservoirState reservoir_state;
  /*
   * CO数据
   */
  GIm__ImCoData *co_data;
  /*
   * 安防风机数据
   */
  GIm__ImFanData *security_fan_data;
  /*
   * 电源风机数据
   */
  GIm__ImFanData *power_fan_data;
  /*
   * 桥架风机数据
   */
  GIm__ImFanData *cabletray_fan_data;
  /*
   * 环境温度数据
   */
  GIm__EnvTempData *env_temp_data;
  /*
   * 电源风机温度数据
   */
  GIm__EnvTempData *power_fan_temp_data;
  /*
   * 负压数据
   */
  GIm__NegativepressureData *negativepressure_data;
  /*
   * PLC状态
   */
  protobuf_c_boolean has_plc_status;
  GIm__PlcStatus plc_status;
  /*
   * 下位机状态数据
   */
  size_t n_lowercomputer_data;
  GIm__LowercomputerData **lowercomputer_data;
  /*
   * 库位模式
   */
  protobuf_c_boolean has_stock_model;
  GIm__StockModel stock_model;
  /*
   * 安防告警数据列表
   */
  size_t n_serucrity_alarm_data;
  GIm__SerucrityAlarmData **serucrity_alarm_data;
  /*
   * 安防组合条件告警数据列表
   */
  size_t n_combination_alarm_data;
  GIm__SerucrityCombinationAlarmData **combination_alarm_data;
  /*
   * PLC的库位故障数据
   */
  GIm__PlcFailureData *plc_failure_data;
  /*
   * 库位状态(暂时仅中位机端使用)
   */
  protobuf_c_boolean has_stock_state;
  GIm__StockState stock_state;
  /*
   * 安防运行状态
   */
  protobuf_c_boolean has_security_runing_state;
  GIm__SecurityRuningState security_runing_state;
  /*
   * 电动球阀状态
   */
  protobuf_c_boolean has_electric_ball_valve_state;
  GIm__ElectricBallValveState electric_ball_valve_state;
  /*
   * 安防异常提示(二级安防)
   */
  protobuf_c_boolean has_security_message;
  int64_t security_message;
  /*
   * 吸真空阀（气控隔膜阀）状态
   */
  protobuf_c_boolean has_suction_vacuum_valve_state;
  GIm__ElectricBallValveState suction_vacuum_valve_state;
  /*
   * 破真空阀状态
   */
  protobuf_c_boolean has_vacuum_breaker_valve_state;
  GIm__ElectricBallValveState vacuum_breaker_valve_state;
};
#define G_IM__IM_STOCK_SECURITY_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_stock_security_info__descriptor) \
    , 0, 0, 0, G_IM__DOOR_STATE__DOOR_STATE_UNKNOWN, 0, G_IM__TRAY_STATE__TRAY_STATE_UNKNOWN, 0, G_IM__ACCESSDOOR_STATE__ACCESSDOOR_DOOR_UNKNOWN, 0, G_IM__FIREDOOR_STATE__FIREDOOR_STATE_UNKNOWN, 0, G_IM__NEEDLEBED_STATE__NEEDLEBED_STATE_UNKNOWN, 0, G_IM__NEEDLEBED_STATE__NEEDLEBED_STATE_UNKNOWN, 0, G_IM__SCAPEGOAT_STATE__SCAPEGOAT_STATE_UNKNOWN, NULL, 0, G_IM__RESERVOIR_STATE__RESERVOIR_UNKNOWN, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, G_IM__PLC_STATUS__PLC_STATUS_UNKNOWN, 0,NULL, 0, G_IM__STOCK_MODEL__STOCK_MODEL_UNKNOWN, 0,NULL, 0,NULL, NULL, 0, G_IM__STOCK_STATE__STOCK_STATE_DISABLE, 0, G_IM__SECURITY_RUNING_STATE__SECURITY_STATE_ENABLE, 0, G_IM__ELECTRIC_BALL_VALVE_STATE__ELECTRIC_BALL_VALVE_STATE_UNKNOWN, 0, 0, 0, G_IM__ELECTRIC_BALL_VALVE_STATE__ELECTRIC_BALL_VALVE_STATE_UNKNOWN, 0, G_IM__ELECTRIC_BALL_VALVE_STATE__ELECTRIC_BALL_VALVE_STATE_UNKNOWN }


/*
 * 安防数据
 */
struct  _GIm__ImSecurityData
{
  ProtobufCMessage base;
  /*
   * 消息头
   */
  GIm__ImCmdHead *head;
  /*
   * 库位安防数据列表
   */
  size_t n_stock_securityinfo;
  GIm__ImStockSecurityInfo **stock_securityinfo;
};
#define G_IM__IM_SECURITY_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_security_data__descriptor) \
    , NULL, 0,NULL }


/*
 * 每台设备升级数据
 */
struct  _GIm__ImDeviceUpdateInfo
{
  ProtobufCMessage base;
  /*
   * 升级项ID
   */
  char *update_id;
  /*
   * 设备类型
   */
  protobuf_c_boolean has_device_type;
  int32_t device_type;
  /*
   * 设备IP
   */
  char *device_addr;
  /*
   * 设备端口
   */
  protobuf_c_boolean has_device_port;
  int32_t device_port;
  /*
   * 升级状态
   */
  protobuf_c_boolean has_update_status;
  GIm__DevieceUpdateStatus update_status;
  /*
   * 升级结果
   */
  protobuf_c_boolean has_update_errorcode;
  GIm__DevieceUpdateErrorcode update_errorcode;
};
#define G_IM__IM_DEVICE_UPDATE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_device_update_info__descriptor) \
    , NULL, 0, 0, NULL, 0, 0, 0, G_IM__DEVIECE_UPDATE_STATUS__UPDATE_STATUS_SUCCESS, 0, G_IM__DEVIECE_UPDATE_ERRORCODE__UPDATE_RESULT_UNKNOWN }


/*
 * 透传应答数据
 */
struct  _GIm__ImDevicePassthroughResponse
{
  ProtobufCMessage base;
  /*
   * 地址
   */
  char *address;
  /*
   * 端口
   */
  char *port;
  /*
   * 内容
   */
  char *content;
  /*
   * 通道ID
   */
  char *channel_id;
  /*
   * 操作结果
   */
  protobuf_c_boolean has_result;
  int32_t result;
};
#define G_IM__IM_DEVICE_PASSTHROUGH_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_device_passthrough_response__descriptor) \
    , NULL, NULL, NULL, NULL, 0, 0 }


/*
 * 设备升级数据
 */
struct  _GIm__ImDeviceUpgradeData
{
  ProtobufCMessage base;
  GIm__ImCmdHead *head;
  /*
   * 设备更新类型
   */
  protobuf_c_boolean has_device_upgrade_type;
  GIm__DeviceUpgradeType device_upgrade_type;
  /*
   * 升级情况数据
   */
  size_t n_update_data;
  GIm__ImDeviceUpdateInfo **update_data;
  /*
   * 透传数据
   */
  GIm__ImDevicePassthroughResponse *passthrough_data;
};
#define G_IM__IM_DEVICE_UPGRADE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_device_upgrade_data__descriptor) \
    , NULL, 0, G_IM__DEVICE_UPGRADE_TYPE__DEVICE_UPDATE_UNKNOWN, 0,NULL, NULL }


/*
 * 设备升级完成
 */
struct  _GIm__ImDeviceUpgradNotify
{
  ProtobufCMessage base;
  /*
   * 设备更新类型
   */
  protobuf_c_boolean has_device_upgrade_type;
  GIm__DeviceUpgradeType device_upgrade_type;
};
#define G_IM__IM_DEVICE_UPGRAD_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_device_upgrad_notify__descriptor) \
    , 0, G_IM__DEVICE_UPGRADE_TYPE__DEVICE_UPDATE_UNKNOWN }


/*
 * 网卡相关
 */
struct  _GIm__ImNetcardParam
{
  ProtobufCMessage base;
  /*
   * 移动是否开启
   */
  protobuf_c_boolean has_mobile;
  protobuf_c_boolean mobile;
  /*
   * 是否开启DHCP
   */
  protobuf_c_boolean has_dhcp;
  protobuf_c_boolean dhcp;
  /*
   * ip地址
   */
  protobuf_c_boolean has_ipaddr;
  int32_t ipaddr;
  /*
   * 掩码
   */
  protobuf_c_boolean has_netmsk;
  int32_t netmsk;
  /*
   * 网关
   */
  protobuf_c_boolean has_gateway;
  int32_t gateway;
  /*
   * 网卡的MAC地址
   */
  char *mac_addr;
  /*
   * 首选DNS
   */
  protobuf_c_boolean has_dns1;
  int32_t dns1;
  /*
   * 备选DNS
   */
  protobuf_c_boolean has_dns2;
  int32_t dns2;
  /*
   * cmd端口
   */
  protobuf_c_boolean has_cmd_port;
  int32_t cmd_port;
  /*
   * UI端口
   */
  protobuf_c_boolean has_ui_port;
  int32_t ui_port;
  /*
   * 广播端口
   */
  protobuf_c_boolean has_boardcast_port;
  int32_t boardcast_port;
};
#define G_IM__IM_NETCARD_PARAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_netcard_param__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * 通道操作结果
 */
struct  _GIm__ImMasterChannelRet
{
  ProtobufCMessage base;
  /*
   * 通道ID
   */
  protobuf_c_boolean has_channel_id;
  int32_t channel_id;
  /*
   * 操作结果
   */
  protobuf_c_boolean has_result;
  int32_t result;
};
#define G_IM__IM_MASTER_CHANNEL_RET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_master_channel_ret__descriptor) \
    , 0, 0, 0, 0 }


/*
 * 工步跳转
 */
struct  _GIm__ImStepJump
{
  ProtobufCMessage base;
  /*
   * 跳转的工步序号
   */
  protobuf_c_boolean has_step;
  int32_t step;
  /*
   * 要工步跳转的通道
   */
  size_t n_channels;
  int32_t *channels;
};
#define G_IM__IM_STEP_JUMP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_step_jump__descriptor) \
    , 0, 0, 0,NULL }


/*
 * 工步跳转，操作结果
 */
struct  _GIm__ImChannelContinueRet
{
  ProtobufCMessage base;
  /*
   * 跳转的工步序号
   */
  protobuf_c_boolean has_step;
  int32_t step;
  /*
   * 跳转失败的通道
   */
  size_t n_channel_ret;
  GIm__ImMasterChannelRet **channel_ret;
};
#define G_IM__IM_CHANNEL_CONTINUE_RET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_channel_continue_ret__descriptor) \
    , 0, 0, 0,NULL }


/*
 * IP通道禁用启用, 操作结果
 */
struct  _GIm__ImChannelEnableByipResult
{
  ProtobufCMessage base;
  /*
   * ipaddr
   */
  protobuf_c_boolean has_ipaddr;
  int32_t ipaddr;
  /*
   * 失败原因
   */
  protobuf_c_boolean has_result;
  int32_t result;
};
#define G_IM__IM_CHANNEL_ENABLE_BYIP_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_channel_enable_byip_result__descriptor) \
    , 0, 0, 0, 0 }


/*
 * 预约暂停
 */
struct  _GIm__ImChannelAppointStop
{
  ProtobufCMessage base;
  /*
   * false 为取消，true为设置
   */
  protobuf_c_boolean has_is_set;
  protobuf_c_boolean is_set;
  /*
   * 预约时间暂定，msec有效; 预约工步暂停， step有效; 预约循环暂停，loop_times和step有效
   */
  protobuf_c_boolean has_stop_type;
  GIm__ImAppointStopType stop_type;
  /*
   * 是否对当前工步有效
   */
  protobuf_c_boolean has_invalid4curstep;
  protobuf_c_boolean invalid4curstep;
  /*
   * 工步号
   */
  protobuf_c_boolean has_step;
  int32_t step;
  /*
   * 循环次数
   */
  protobuf_c_boolean has_loop_times;
  int32_t loop_times;
  /*
   * 暂停时间或超时时间，1970年1月1日到当前的毫秒数
   */
  protobuf_c_boolean has_msec;
  int64_t msec;
};
#define G_IM__IM_CHANNEL_APPOINT_STOP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_channel_appoint_stop__descriptor) \
    , 0, 0, 0, G_IM__IM_APPOINT_STOP_TYPE__appoint_step_stop, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * 按库位停止安防
 */
struct  _GIm__ImSecurityStopByStock
{
  ProtobufCMessage base;
  /*
   * 库ID
   */
  protobuf_c_boolean has_stock_id;
  int32_t stock_id;
  /*
   * 成功与否
   */
  protobuf_c_boolean has_success;
  protobuf_c_boolean success;
};
#define G_IM__IM_SECURITY_STOP_BY_STOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_security_stop_by_stock__descriptor) \
    , 0, 0, 0, 0 }


/*
 * 通道测试参数
 */
struct  _GIm__ImChannelTest
{
  ProtobufCMessage base;
  /*
   * 通道号
   */
  protobuf_c_boolean has_channel_id;
  int32_t channel_id;
  /*
   * 工步文件路径
   */
  char *step_file_path;
};
#define G_IM__IM_CHANNEL_TEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_channel_test__descriptor) \
    , 0, 0, NULL }


/*
 * 清除通道告警参数
 */
struct  _GIm__ImChannelClearWarn
{
  ProtobufCMessage base;
  /*
   * 通道号
   */
  protobuf_c_boolean has_channel_id;
  int32_t channel_id;
  /*
   * 告警类型
   */
  size_t n_warn_type;
  GIm__ImWarnType *warn_type;
};
#define G_IM__IM_CHANNEL_CLEAR_WARN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_channel_clear_warn__descriptor) \
    , 0, 0, 0,NULL }


/*
 * 清除安防告警参数
 */
struct  _GIm__ImSecurityClearWarn
{
  ProtobufCMessage base;
  /*
   * 库位号 为0代表所有库位
   */
  protobuf_c_boolean has_stock_no;
  int32_t stock_no;
  /*
   * 告警代码 V01 T01等等 All 代表所有告警
   */
  char *alarm_code;
};
#define G_IM__IM_SECURITY_CLEAR_WARN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_security_clear_warn__descriptor) \
    , 0, 0, NULL }


/*
 * 闲时保护参数
 */
struct  _GIm__ImDisplayTimeProtection
{
  ProtobufCMessage base;
  /*
   * true，开启
   */
  protobuf_c_boolean has_enable;
  protobuf_c_boolean enable;
  /*
   * 采样间隔，单位ms
   */
  protobuf_c_boolean has_sampling_interval;
  int32_t sampling_interval;
  /*
   * 记录时间，单位ms
   */
  protobuf_c_boolean has_record_time;
  int32_t record_time;
  /*
   * true，开启，电压上限保护（整柜急停）
   */
  protobuf_c_boolean has_volt_upper_limit_protection;
  protobuf_c_boolean volt_upper_limit_protection;
  /*
   * true，开启，电压下限保护（整柜急停）
   */
  protobuf_c_boolean has_volt_lower_limit_protection;
  protobuf_c_boolean volt_lower_limit_protection;
};
#define G_IM__IM_DISPLAY_TIME_PROTECTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_display_time_protection__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * 程序升级参数
 */
struct  _GIm__ImSoftUpdate
{
  ProtobufCMessage base;
  /*
   * 密码
   */
  char *passwd;
  /*
   * 升级程序文件路径
   */
  char *update_file_path;
};
#define G_IM__IM_SOFT_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_soft_update__descriptor) \
    , NULL, NULL }


/*
 * 下位机升级参数
 */
struct  _GIm__ImDeviceUpdate
{
  ProtobufCMessage base;
  /*
   * 校验
   */
  char *check;
  /*
   * 升级程序文件相对路径+完整文件名
   */
  char *update_file_path;
};
#define G_IM__IM_DEVICE_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_device_update__descriptor) \
    , NULL, NULL }


/*
 * 透传参数
 */
struct  _GIm__ImDevicePassthrough
{
  ProtobufCMessage base;
  /*
   * 地址
   */
  char *address;
  /*
   * 端口
   */
  char *port;
  /*
   * 透传内容
   */
  char *content;
  /*
   * 通讯协议类型，0-TCP|1-UDP
   */
  protobuf_c_boolean has_im_communication_protocol;
  int32_t im_communication_protocol;
  /*
   * 通道号
   */
  char *channel_id;
};
#define G_IM__IM_DEVICE_PASSTHROUGH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_device_passthrough__descriptor) \
    , NULL, NULL, NULL, 0, 0, NULL }


/*
 * 命令下发参数
 */
struct  _GIm__ImCmdRequest
{
  ProtobufCMessage base;
  GIm__ImCmdHead *cmd_head;
  /*
   * 通道相关指令参数
   */
  size_t n_chnl_nodes;
  int32_t *chnl_nodes;
  /*
   * 通道测试指令参数
   */
  size_t n_chnl_test_nodes;
  GIm__ImChannelTest **chnl_test_nodes;
  /*
   * 工步相关指令参数
   */
  size_t n_step_nums;
  int32_t *step_nums;
  /*
   * 升级程序指令参数
   */
  GIm__ImSoftUpdate *update;
  /*
   * 更新系统配置参数
   */
  protobuf_c_boolean has_type;
  GIm__SysconfUpdateType type;
  /*
   * 设置系统时间参数
   */
  protobuf_c_boolean has_time_set_msec;
  int64_t time_set_msec;
  /*
   * 授权相关参数
   */
  GIm__ImAuth *auth;
  /*
   * 根据IP操作的参数
   */
  size_t n_ipaddr_nodes;
  int32_t *ipaddr_nodes;
  /*
   * 单元数据存储设置
   */
  GIm__ImDataStore4unit *unit_data;
  /*
   * 告警数据配置
   */
  GIm__ImDataStore4alarm *alarm_data;
  /*
   * 只有简单的开启和关闭采取这个参数,如32VT采集，声光报警，安防开关等
   */
  protobuf_c_boolean has_enable;
  protobuf_c_boolean enable;
  /*
   * 设置要停安防的库位ID，可能有多个
   */
  size_t n_security_stop;
  int32_t *security_stop;
  /*
   * 工步跳转参数
   */
  GIm__ImStepJump *step_jump;
  /*
   * 通道预约暂停参数
   */
  GIm__ImChannelAppointStop *chnl_appoint;
  /*
   * 清除通道告警参数
   */
  size_t n_warn_data;
  GIm__ImChannelClearWarn **warn_data;
  /*
   * 安防传输模式
   */
  protobuf_c_boolean has_transfer_model;
  GIm__SecurityTransferModel transfer_model;
  /*
   * 清除安防告警
   */
  GIm__ImSecurityClearWarn *security_clear_warn;
  /*
   * 闲时保护参数
   */
  size_t n_dt_protection_data;
  GIm__ImDisplayTimeProtection **dt_protection_data;
  /*
   * 安防执行复位/测堵测漏库位号/脱开压床的库位号/工装要禁用的库位
   */
  protobuf_c_boolean has_stock_no;
  int32_t stock_no;
  /*
   * 安防执行结果反馈
   */
  GIm__ExecuteSerucrityResult *serucrity_result;
  /*
   * 下位机升级包参数
   */
  GIm__ImDeviceUpdate *device_update;
  /*
   * 下位机透传参数
   */
  GIm__ImDevicePassthrough *device_passthrough;
  /*
   * 库位状态，当切为维护时不触发安防
   */
  protobuf_c_boolean has_stock_state;
  GIm__StockState stock_state;
  /*
   * 工装类型
   */
  protobuf_c_boolean has_workjust_type;
  GIm__WorkjustType workjust_type;
  /*
   * 禁用安防代码 V09,V11...
   */
  char *disable_security_code;
  /*
   * 工装校准模式
   */
  protobuf_c_boolean has_adjust_power_mode;
  GIm__AdjustPowerMode adjust_power_mode;
};
#define G_IM__IM_CMD_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_cmd_request__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0,NULL, NULL, 0, G_IM__SYSCONF_UPDATE_TYPE__UPDATE_ALL, 0, 0, NULL, 0,NULL, NULL, NULL, 0, 0, 0,NULL, NULL, NULL, 0,NULL, 0, G_IM__SECURITY_TRANSFER_MODEL__ONLY_STATE_CHANGE, NULL, 0,NULL, 0, 0, NULL, NULL, NULL, 0, G_IM__STOCK_STATE__STOCK_STATE_DISABLE, 0, G_IM__WORKJUST_TYPE__WORKJUST_TYPE_UNKNOWN, NULL, 0, G_IM__ADJUST_POWER_MODE__AUTO_PARALLEL }


/*
 * 安防执行结果反馈
 */
struct  _GIm__ExecuteSerucrityResult
{
  ProtobufCMessage base;
  /*
   * 库位号
   */
  protobuf_c_boolean has_stock_no;
  int32_t stock_no;
  /*
   * 执行结果
   */
  protobuf_c_boolean has_execute_result;
  GIm__ExecuteResult execute_result;
};
#define G_IM__EXECUTE_SERUCRITY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__execute_serucrity_result__descriptor) \
    , 0, 0, 0, G_IM__EXECUTE_RESULT__SUCCESS }


/*
 * 命令返回参数
 */
struct  _GIm__ImCmdResponse
{
  ProtobufCMessage base;
  GIm__ImCmdHead *cmd_head;
  protobuf_c_boolean has_result;
  GIm__CmdResult result;
  size_t n_netcard_nodes;
  GIm__ImNetcardParam **netcard_nodes;
  char *im_version;
  protobuf_c_boolean has_type;
  GIm__SysconfUpdateType type;
  GIm__ImAuth *auth_info;
  size_t n_chnl_ret_nodes;
  GIm__ImMasterChannelRet **chnl_ret_nodes;
  /*
   * 工步启动、跳转等操作结果
   */
  GIm__ImChannelContinueRet *step_op;
  size_t n_byip_nodes;
  GIm__ImChannelEnableByipResult **byip_nodes;
  protobuf_c_boolean has_self_check_result;
  int32_t self_check_result;
  size_t n_security_stop_ret;
  GIm__ImSecurityStopByStock **security_stop_ret;
};
#define G_IM__IM_CMD_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_cmd_response__descriptor) \
    , NULL, 0, G_IM__CMD_RESULT__CMD_SUCCESS, 0,NULL, NULL, 0, G_IM__SYSCONF_UPDATE_TYPE__UPDATE_ALL, NULL, 0,NULL, NULL, 0,NULL, 0, 0, 0,NULL }


/*
 * 告警信息
 */
struct  _GIm__ImChnnelWarn
{
  ProtobufCMessage base;
  /*
   * 告警类型
   */
  protobuf_c_boolean has_warn_type;
  GIm__ImWarnType warn_type;
  /*
   * 告警产生的通道ID或外设ID
   */
  protobuf_c_boolean has_warn_src_id;
  int32_t warn_src_id;
  /*
   * 告警码
   */
  protobuf_c_boolean has_warn_code;
  int64_t warn_code;
  /*
   * 发生告警的时间
   */
  protobuf_c_boolean has_warn_time;
  int64_t warn_time;
};
#define G_IM__IM_CHNNEL_WARN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_chnnel_warn__descriptor) \
    , 0, G_IM__IM_WARN_TYPE__extern_device_warn, 0, 0, 0, 0, 0, 0 }


/*
 * 外部变量
 */
struct  _GIm__ImExternData
{
  ProtobufCMessage base;
  /*
   * 变量别名
   */
  char *alias_name;
  /*
   * 变量单位
   */
  char *unit;
  /*
   * 变量名
   */
  char *key_name;
  /*
   * 设备类型
   */
  protobuf_c_boolean has_dev_type;
  int32_t dev_type;
  /*
   * 设备索引
   */
  protobuf_c_boolean has_dev_index;
  int32_t dev_index;
  /*
   * 变量值
   */
  protobuf_c_boolean has_value;
  float value;
};
#define G_IM__IM_EXTERN_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_extern_data__descriptor) \
    , NULL, NULL, NULL, 0, 0, 0, 0, 0, 0 }


/*
 * 每个主通道UI上报的数据
 */
struct  _GIm__ImChannelParam
{
  ProtobufCMessage base;
  /*
   * 主通道号
   */
  protobuf_c_boolean has_channel_id;
  int32_t channel_id;
  /*
   * 主通道工作状态
   */
  protobuf_c_boolean has_work_state;
  GIm__ChannelSt work_state;
  /*
   * 电源通道工作状态
   */
  protobuf_c_boolean has_power_state;
  GIm__PowerChannelSt power_state;
  /*
   * 辅助状态（闲时记录）
   */
  protobuf_c_boolean has_assist_state;
  GIm__ChAssistSt assist_state;
  /*
   * 告警
   */
  size_t n_im_chnl_warn;
  GIm__ImChnnelWarn **im_chnl_warn;
  /*
   * 循环号
   */
  char *loop_num;
  /*
   * 工步序号
   */
  protobuf_c_boolean has_step_num;
  int32_t step_num;
  /*
   * 工步
   */
  char *step_name;
  /*
   * 绝对时间（当前时间，时间戳）:1970年1月1日到当前的毫秒数
   */
  protobuf_c_boolean has_absolute_time;
  int64_t absolute_time;
  /*
   * 相对时间:毫秒数，不包括暂停
   */
  protobuf_c_boolean has_relative_time;
  int64_t relative_time;
  /*
   * 电芯数据
   */
  size_t n_cell;
  GIm__ImCellParam **cell;
  /*
   * 设定电压
   */
  protobuf_c_boolean has_set_voltage;
  float set_voltage;
  /*
   * 设定电流
   */
  protobuf_c_boolean has_set_current;
  float set_current;
  /*
   * 设定功率
   */
  protobuf_c_boolean has_set_power;
  float set_power;
  /*
   * 实际电流
   */
  protobuf_c_boolean has_actual_current;
  float actual_current;
  /*
   * 容量
   */
  protobuf_c_boolean has_capacity;
  double capacity;
  /*
   * 总压
   */
  protobuf_c_boolean has_voltage_total;
  float voltage_total;
  /*
   * 极耳电压
   */
  protobuf_c_boolean has_ear_voltage;
  float ear_voltage;
  /*
   * 端口电压
   */
  protobuf_c_boolean has_port_voltage;
  float port_voltage;
  /*
   * 最大辅助温度
   */
  protobuf_c_boolean has_aux_tmp_max;
  float aux_tmp_max;
  /*
   * 最小辅助温度
   */
  protobuf_c_boolean has_aux_tmp_min;
  float aux_tmp_min;
  /*
   * 辅助压差
   */
  protobuf_c_boolean has_aux_voltage_diff;
  float aux_voltage_diff;
  /*
   * 辅助温差
   */
  protobuf_c_boolean has_aux_tmp_diff;
  float aux_tmp_diff;
  /*
   * 辅助总压
   */
  protobuf_c_boolean has_aux_voltage_total;
  float aux_voltage_total;
  /*
   * 负压值
   */
  protobuf_c_boolean has_negative_pressure;
  float negative_pressure;
  /*
   * 外设数据
   */
  size_t n_extern_data;
  GIm__ImExternData **extern_data;
  /*
   * 外压（电芯夹具压力）
   */
  protobuf_c_boolean has_external_pressure;
  float external_pressure;
};
#define G_IM__IM_CHANNEL_PARAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_channel_param__descriptor) \
    , 0, 0, 0, G_IM__CHANNEL_ST__CHANNEL_ST_READY, 0, G_IM__POWER_CHANNEL_ST__POWER_CHANNEL_ST_READY, 0, G_IM__CH_ASSIST_ST__CH_ASSIST_ST_NONE, 0,NULL, NULL, 0, 0, NULL, 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0 }


/*
 * 每个电芯通道UI上报的数据
 */
struct  _GIm__ImCellParam
{
  ProtobufCMessage base;
  /*
   * 电芯号：全局唯一Id
   */
  protobuf_c_boolean has_cell_id;
  int32_t cell_id;
  /*
   * 实际电压
   */
  protobuf_c_boolean has_actual_voltage;
  float actual_voltage;
  /*
   * 实际功率
   */
  protobuf_c_boolean has_actual_power;
  float actual_power;
  /*
   * 温度
   */
  protobuf_c_boolean has_temperature;
  float temperature;
  /*
   * 能量
   */
  protobuf_c_boolean has_energy;
  double energy;
  /*
   * 极耳电压
   */
  protobuf_c_boolean has_ear_voltage;
  float ear_voltage;
  /*
   * 端口电压
   */
  protobuf_c_boolean has_port_voltage;
  float port_voltage;
  /*
   * 外设数据
   */
  size_t n_extern_data;
  GIm__ImExternData **extern_data;
};
#define G_IM__IM_CELL_PARAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_cell_param__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL }


/*
 * UI上报数据
 */
struct  _GIm__ImUiData
{
  ProtobufCMessage base;
  GIm__ImCmdHead *head;
  /*
   * 主通道个数及相关值
   */
  size_t n_channel;
  GIm__ImChannelParam **channel;
};
#define G_IM__IM_UI_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_ui_data__descriptor) \
    , NULL, 0,NULL }


struct  _GIm__ImUiDataResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_result;
  int32_t result;
};
#define G_IM__IM_UI_DATA_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_ui_data_response__descriptor) \
    , 0, 0 }


/*
 * 通道校准加载参数
 */
struct  _GIm__ImAjustRequest
{
  ProtobufCMessage base;
  /*
   * 通道ID
   */
  protobuf_c_boolean has_channel_id;
  int32_t channel_id;
  /*
   * 参数类型 关闭:0 充电:1 电芯放电:2 dcdc:3 极耳充电:4 清除故障:5 开启数据透传6: 关闭数据透传7:
   */
  protobuf_c_boolean has_ajust_type;
  int32_t ajust_type;
  /*
   * 加载电压 0.1mV
   */
  protobuf_c_boolean has_load_voltage;
  float load_voltage;
  /*
   * 加载电流 0.1mA
   */
  protobuf_c_boolean has_load_current;
  float load_current;
  /*
   * 加载延时时间 ms
   */
  protobuf_c_boolean has_relay_time;
  int32_t relay_time;
  /*
   * 电源工装校准模式
   */
  protobuf_c_boolean has_power_mode;
  GIm__AdjustPowerMode power_mode;
};
#define G_IM__IM_AJUST_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_ajust_request__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, G_IM__ADJUST_POWER_MODE__AUTO_PARALLEL }


/*
 * 校准加载命令返回参数
 */
struct  _GIm__ImAjustResponse
{
  ProtobufCMessage base;
  /*
   * 通道ID
   */
  protobuf_c_boolean has_channel_id;
  int32_t channel_id;
  /*
   * 参数类型 关闭:0 充电:1 电芯放电:2 dcdc:3 极耳充电:4 清除故障:5 开启数据透传6: 关闭数据透传7:
   */
  protobuf_c_boolean has_ajust_type;
  int32_t ajust_type;
  protobuf_c_boolean has_result;
  GIm__CmdResult result;
  /*
   * 电源工装校准模式
   */
  protobuf_c_boolean has_power_mode;
  GIm__AdjustPowerMode power_mode;
};
#define G_IM__IM_AJUST_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_ajust_response__descriptor) \
    , 0, 0, 0, 0, 0, G_IM__CMD_RESULT__CMD_SUCCESS, 0, G_IM__ADJUST_POWER_MODE__AUTO_PARALLEL }


/*
 * 通道调试查询参数
 */
struct  _GIm__ImDebugRequest
{
  ProtobufCMessage base;
  /*
   * 通道ID
   */
  protobuf_c_boolean has_channel_id;
  int32_t channel_id;
  /*
   * 查询类型 常规查询:1,电芯温度:2,电芯温度:3
   */
  protobuf_c_boolean has_read_type;
  int32_t read_type;
  /*
   * 电源工装校准模式
   */
  protobuf_c_boolean has_power_mode;
  GIm__AdjustPowerMode power_mode;
};
#define G_IM__IM_DEBUG_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_debug_request__descriptor) \
    , 0, 0, 0, 0, 0, G_IM__ADJUST_POWER_MODE__AUTO_PARALLEL }


/*
 * 通道调试查询返回参数
 */
struct  _GIm__ImDebugResponse
{
  ProtobufCMessage base;
  /*
   * 通道ID
   */
  protobuf_c_boolean has_channel_id;
  int32_t channel_id;
  /*
   * 查询类型 常规查询:1,电芯温度:2,电芯温度:3
   */
  protobuf_c_boolean has_read_type;
  int32_t read_type;
  /*
   * 执行结果
   */
  protobuf_c_boolean has_result;
  GIm__CmdResult result;
  /*
   * 电压个数
   */
  protobuf_c_boolean has_vnum;
  int32_t vnum;
  /*
   * 电流个数
   */
  protobuf_c_boolean has_inum;
  int32_t inum;
  /*
   * 温度个数
   */
  protobuf_c_boolean has_tnum;
  int32_t tnum;
  /*
   * 电压数组
   */
  size_t n_voltages;
  float *voltages;
  /*
   * 电流数组
   */
  size_t n_currents;
  float *currents;
  /*
   * 温度数组
   */
  size_t n_temperatures;
  float *temperatures;
  /*
   * DC-DC输入电压
   */
  protobuf_c_boolean has_dc_dc_input_voltage;
  float dc_dc_input_voltage;
  /*
   * DC-DC输出电压
   */
  protobuf_c_boolean has_dc_dc_output_voltage;
  float dc_dc_output_voltage;
  /*
   * DC-DC温度
   */
  protobuf_c_boolean has_dc_dc_temperature;
  float dc_dc_temperature;
  /*
   * 电源工装校准模式
   */
  protobuf_c_boolean has_power_mode;
  GIm__AdjustPowerMode power_mode;
  /*
   * 下位机告警类型
   */
  protobuf_c_boolean has_low_warm_type;
  GIm__LowerMachineWarnType low_warm_type;
  /*
   * 下位机通道故障类型
   */
  protobuf_c_boolean has_channel_fault_type;
  GIm__LowerMachineChannelFaultType channel_fault_type;
  /*
   * 下位机arm故障类型
   */
  protobuf_c_boolean has_arm_fault_type;
  GIm__LowerMachineArmFaultType arm_fault_type;
};
#define G_IM__IM_DEBUG_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_debug_response__descriptor) \
    , 0, 0, 0, 0, 0, G_IM__CMD_RESULT__CMD_SUCCESS, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0, G_IM__ADJUST_POWER_MODE__AUTO_PARALLEL, 0, G_IM__LOWER_MACHINE_WARN_TYPE__NO_WARN, 0, G_IM__LOWER_MACHINE_CHANNEL_FAULT_TYPE__CHANNEL_NO_FAULT, 0, G_IM__LOWER_MACHINE_ARM_FAULT_TYPE__ARM_NO_FAULT }


/*
 * 读写EEPROM参数
 */
struct  _GIm__ImEepromRequest
{
  ProtobufCMessage base;
  /*
   * 通道号
   */
  protobuf_c_boolean has_channel_id;
  int32_t channel_id;
  /*
   * 读写EEPROM相关参数类型
   */
  protobuf_c_boolean has_eeprom_type;
  GIm__ImEepromType eeprom_type;
  /*
   * 校准系数类型
   */
  protobuf_c_boolean has_fator_type;
  GIm__ImFatorType fator_type;
  /*
   * 校准系数项目
   */
  protobuf_c_boolean has_fator_option;
  GIm__ImFatorOption fator_option;
  /*
   * 5 对因子 - K 因子（斜率因子）
   */
  size_t n_k_fators;
  float *k_fators;
  /*
   * 5 对因子 - B 因子（截距因子）
   */
  size_t n_b_fators;
  float *b_fators;
  /*
   * 电源工装校准模式
   */
  protobuf_c_boolean has_power_mode;
  GIm__AdjustPowerMode power_mode;
};
#define G_IM__IM_EEPROM_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_eeprom_request__descriptor) \
    , 0, 0, 0, G_IM__IM_EEPROM_TYPE__EEP_RESERVED, 0, G_IM__IM_FATOR_TYPE__EPP_FT_RESERVED, 0, G_IM__IM_FATOR_OPTION__EPP_FO_RESERVED, 0,NULL, 0,NULL, 0, G_IM__ADJUST_POWER_MODE__AUTO_PARALLEL }


/*
 * 读EEPROM返回参数
 */
struct  _GIm__ImEepromReadResponse
{
  ProtobufCMessage base;
  /*
   * 通道号
   */
  protobuf_c_boolean has_channel_id;
  int32_t channel_id;
  /*
   * EEPROM相关参数类型
   */
  protobuf_c_boolean has_eeprom_type;
  GIm__ImEepromType eeprom_type;
  protobuf_c_boolean has_result;
  GIm__CmdResult result;
  /*
   * 校准系数类型
   */
  protobuf_c_boolean has_fator_type;
  GIm__ImFatorType fator_type;
  /*
   * 校准系数项目
   */
  protobuf_c_boolean has_fator_option;
  GIm__ImFatorOption fator_option;
  /*
   * 5 对因子 - K 因子（斜率因子）
   */
  size_t n_k_fators;
  float *k_fators;
  /*
   * 5 对因子 - B 因子（截距因子）
   */
  size_t n_b_fators;
  float *b_fators;
  /*
   *  机型信息，Vmax（单位：1V）
   */
  protobuf_c_boolean has_v_max;
  int32_t v_max;
  /*
   *  机型信息，Imax（单位：1A）
   */
  protobuf_c_boolean has_i_max;
  int32_t i_max;
  /*
   *  机型信息，Pmax（单位：1W）
   */
  protobuf_c_boolean has_p_max;
  int32_t p_max;
  /*
   * 电源工装校准模式
   */
  protobuf_c_boolean has_power_mode;
  GIm__AdjustPowerMode power_mode;
};
#define G_IM__IM_EEPROM_READ_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_eeprom_read_response__descriptor) \
    , 0, 0, 0, G_IM__IM_EEPROM_TYPE__EEP_RESERVED, 0, G_IM__CMD_RESULT__CMD_SUCCESS, 0, G_IM__IM_FATOR_TYPE__EPP_FT_RESERVED, 0, G_IM__IM_FATOR_OPTION__EPP_FO_RESERVED, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0, G_IM__ADJUST_POWER_MODE__AUTO_PARALLEL }


/*
 * 写EEPROM返回参数
 */
struct  _GIm__ImEepromWriteResponse
{
  ProtobufCMessage base;
  /*
   * 通道号
   */
  protobuf_c_boolean has_channel_id;
  int32_t channel_id;
  /*
   * EEPROM相关参数类型
   */
  protobuf_c_boolean has_eeprom_type;
  GIm__ImEepromType eeprom_type;
  /*
   * 电源工装校准模式
   */
  protobuf_c_boolean has_power_mode;
  GIm__AdjustPowerMode power_mode;
  protobuf_c_boolean has_result;
  GIm__CmdResult result;
};
#define G_IM__IM_EEPROM_WRITE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_eeprom_write_response__descriptor) \
    , 0, 0, 0, G_IM__IM_EEPROM_TYPE__EEP_RESERVED, 0, G_IM__ADJUST_POWER_MODE__AUTO_PARALLEL, 0, G_IM__CMD_RESULT__CMD_SUCCESS }


/*
 * 负压阀参数
 */
struct  _GIm__NegativePressureParam
{
  ProtobufCMessage base;
  /*
   * 设置的负压值，单位Kpa
   */
  protobuf_c_boolean has_k_negative_pressure;
  float k_negative_pressure;
  /*
   * 触发负压阀关闭的门限值
   */
  protobuf_c_boolean has_k_negative_pressure_limit;
  float k_negative_pressure_limit;
  /*
   * 负压值下降速率，单位Kpa/Min
   */
  protobuf_c_boolean has_k_negative_pressure_rate;
  float k_negative_pressure_rate;
  /*
   * 负压阀稳定等待时间，单位秒
   */
  protobuf_c_boolean has_k_wait_seconds;
  int32_t k_wait_seconds;
  /*
   * 抽负压超时时间，指定时间后未达到设定的负压值则为抽负压失败，单位秒
   */
  protobuf_c_boolean has_k_negative_pressure_timeout_seconds;
  int32_t k_negative_pressure_timeout_seconds;
  /*
   * 漏率判断时间，单位秒
   */
  protobuf_c_boolean has_k_leakage_jugge_seconds;
  int32_t k_leakage_jugge_seconds;
};
#define G_IM__NEGATIVE_PRESSURE_PARAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__negative_pressure_param__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * 负压阀请求
 */
struct  _GIm__ImNegativePressureRequest
{
  ProtobufCMessage base;
  /*
   * 库位号
   */
  protobuf_c_boolean has_stock_no;
  int32_t stock_no;
  /*
   * 命令类型
   */
  protobuf_c_boolean has_cmd_type;
  GIm__NegativePressureCmdType cmd_type;
  /*
   * 命令参数
   */
  GIm__NegativePressureParam *cmd_param;
  /*
   * 负压真空阀类型
   */
  protobuf_c_boolean has_valve_type;
  GIm__NegativePressureVacuumValveType valve_type;
};
#define G_IM__IM_NEGATIVE_PRESSURE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_negative_pressure_request__descriptor) \
    , 0, 0, 0, G_IM__NEGATIVE_PRESSURE_CMD_TYPE__NEGATIVE_PRESSURE_CMD_TYPE_START, NULL, 0, G_IM__NEGATIVE_PRESSURE_VACUUM_VALVE_TYPE__NEGATIVE_PRESSURE_VACUUM_VALVE_TYPE_SUCTION }


/*
 * 负压阀返回参数
 */
struct  _GIm__ImNegativePressureResponse
{
  ProtobufCMessage base;
  /*
   * 库位号
   */
  protobuf_c_boolean has_stock_no;
  int32_t stock_no;
  /*
   * 命令类型
   */
  protobuf_c_boolean has_cmd_type;
  GIm__NegativePressureCmdType cmd_type;
  /*
   * 负压值，单位Kpa
   */
  protobuf_c_boolean has_k_negative_pressure;
  float k_negative_pressure;
  protobuf_c_boolean has_result;
  GIm__CmdResult result;
  /*
   * 负压阀操作结果
   */
  protobuf_c_boolean has_op_res;
  GIm__NegativePressureOpRes op_res;
  /*
   * 测漏漏率
   */
  protobuf_c_boolean has_leakage_rate;
  float leakage_rate;
  /*
   * 测漏抽真空值，单位Kpa
   */
  protobuf_c_boolean has_vacuum_neg_pressure;
  float vacuum_neg_pressure;
  /*
   * 测漏稳压前负压值，单位Kpa
   */
  protobuf_c_boolean has_steady_neg_pressure;
  float steady_neg_pressure;
  /*
   * 第一个负压值/测漏稳压后负压值，单位Kpa
   */
  protobuf_c_boolean has_first_neg_pressure;
  float first_neg_pressure;
  /*
   * 第二个负压值/测漏保压后负压值，单位Kpa
   */
  protobuf_c_boolean has_second_neg_pressure;
  float second_neg_pressure;
};
#define G_IM__IM_NEGATIVE_PRESSURE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_negative_pressure_response__descriptor) \
    , 0, 0, 0, G_IM__NEGATIVE_PRESSURE_CMD_TYPE__NEGATIVE_PRESSURE_CMD_TYPE_START, 0, 0, 0, G_IM__CMD_RESULT__CMD_SUCCESS, 0, G_IM__NEGATIVE_PRESSURE_OP_RES__NEGATIVE_PRESSURE_OP_RES_SUCC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * 下位机版本查询参数
 */
struct  _GIm__ImVersionQueryRequest
{
  ProtobufCMessage base;
  /*
   * 电源工装校准模式
   */
  protobuf_c_boolean has_power_mode;
  GIm__AdjustPowerMode power_mode;
  /*
   * 模组/电芯通道号
   */
  protobuf_c_boolean has_channel_id;
  int32_t channel_id;
  /*
   * 芯片类型
   */
  protobuf_c_boolean has_chip_type;
  GIm__VersionQueryChipType chip_type;
  /*
   * 查询类型
   */
  protobuf_c_boolean has_query_type;
  GIm__VersionQueryType query_type;
};
#define G_IM__IM_VERSION_QUERY_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_version_query_request__descriptor) \
    , 0, G_IM__ADJUST_POWER_MODE__AUTO_PARALLEL, 0, 0, 0, G_IM__VERSION_QUERY_CHIP_TYPE__VERSION_QUERY_CHIP_TYPE_UNKNOWN, 0, G_IM__VERSION_QUERY_TYPE__VERSION_QUERY_TYPE_UNKNOWN }


/*
 * 下位机版本查询返回参数
 */
struct  _GIm__ImVersionQueryResponse
{
  ProtobufCMessage base;
  /*
   * 电源工装校准模式
   */
  protobuf_c_boolean has_power_mode;
  GIm__AdjustPowerMode power_mode;
  /*
   * 模组/电芯通道号
   */
  protobuf_c_boolean has_channel_id;
  int32_t channel_id;
  /*
   * 芯片类型
   */
  protobuf_c_boolean has_chip_type;
  GIm__VersionQueryChipType chip_type;
  /*
   * 查询类型
   */
  protobuf_c_boolean has_query_type;
  GIm__VersionQueryType query_type;
  /*
   * 命令结果
   */
  protobuf_c_boolean has_result;
  GIm__CmdResult result;
  /*
   * 程序版本信息
   */
  char *app_version;
  /*
   * 程序名称
   */
  char *app_name;
};
#define G_IM__IM_VERSION_QUERY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&g_im__im_version_query_response__descriptor) \
    , 0, G_IM__ADJUST_POWER_MODE__AUTO_PARALLEL, 0, 0, 0, G_IM__VERSION_QUERY_CHIP_TYPE__VERSION_QUERY_CHIP_TYPE_UNKNOWN, 0, G_IM__VERSION_QUERY_TYPE__VERSION_QUERY_TYPE_UNKNOWN, 0, G_IM__CMD_RESULT__CMD_SUCCESS, NULL, NULL }


/* GIm__ImCmdHead methods */
void   g_im__im_cmd_head__init
                     (GIm__ImCmdHead         *message);
size_t g_im__im_cmd_head__get_packed_size
                     (const GIm__ImCmdHead   *message);
size_t g_im__im_cmd_head__pack
                     (const GIm__ImCmdHead   *message,
                      uint8_t             *out);
size_t g_im__im_cmd_head__pack_to_buffer
                     (const GIm__ImCmdHead   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImCmdHead *
       g_im__im_cmd_head__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_cmd_head__free_unpacked
                     (GIm__ImCmdHead *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImAuth methods */
void   g_im__im_auth__init
                     (GIm__ImAuth         *message);
size_t g_im__im_auth__get_packed_size
                     (const GIm__ImAuth   *message);
size_t g_im__im_auth__pack
                     (const GIm__ImAuth   *message,
                      uint8_t             *out);
size_t g_im__im_auth__pack_to_buffer
                     (const GIm__ImAuth   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImAuth *
       g_im__im_auth__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_auth__free_unpacked
                     (GIm__ImAuth *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImDataStore4unit methods */
void   g_im__im_data_store4unit__init
                     (GIm__ImDataStore4unit         *message);
size_t g_im__im_data_store4unit__get_packed_size
                     (const GIm__ImDataStore4unit   *message);
size_t g_im__im_data_store4unit__pack
                     (const GIm__ImDataStore4unit   *message,
                      uint8_t             *out);
size_t g_im__im_data_store4unit__pack_to_buffer
                     (const GIm__ImDataStore4unit   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImDataStore4unit *
       g_im__im_data_store4unit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_data_store4unit__free_unpacked
                     (GIm__ImDataStore4unit *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImDataStore4alarm methods */
void   g_im__im_data_store4alarm__init
                     (GIm__ImDataStore4alarm         *message);
size_t g_im__im_data_store4alarm__get_packed_size
                     (const GIm__ImDataStore4alarm   *message);
size_t g_im__im_data_store4alarm__pack
                     (const GIm__ImDataStore4alarm   *message,
                      uint8_t             *out);
size_t g_im__im_data_store4alarm__pack_to_buffer
                     (const GIm__ImDataStore4alarm   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImDataStore4alarm *
       g_im__im_data_store4alarm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_data_store4alarm__free_unpacked
                     (GIm__ImDataStore4alarm *message,
                      ProtobufCAllocator *allocator);
/* GIm__SmokeItem methods */
void   g_im__smoke_item__init
                     (GIm__SmokeItem         *message);
size_t g_im__smoke_item__get_packed_size
                     (const GIm__SmokeItem   *message);
size_t g_im__smoke_item__pack
                     (const GIm__SmokeItem   *message,
                      uint8_t             *out);
size_t g_im__smoke_item__pack_to_buffer
                     (const GIm__SmokeItem   *message,
                      ProtobufCBuffer     *buffer);
GIm__SmokeItem *
       g_im__smoke_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__smoke_item__free_unpacked
                     (GIm__SmokeItem *message,
                      ProtobufCAllocator *allocator);
/* GIm__SmokeData methods */
void   g_im__smoke_data__init
                     (GIm__SmokeData         *message);
size_t g_im__smoke_data__get_packed_size
                     (const GIm__SmokeData   *message);
size_t g_im__smoke_data__pack
                     (const GIm__SmokeData   *message,
                      uint8_t             *out);
size_t g_im__smoke_data__pack_to_buffer
                     (const GIm__SmokeData   *message,
                      ProtobufCBuffer     *buffer);
GIm__SmokeData *
       g_im__smoke_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__smoke_data__free_unpacked
                     (GIm__SmokeData *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImCoItem methods */
void   g_im__im_co_item__init
                     (GIm__ImCoItem         *message);
size_t g_im__im_co_item__get_packed_size
                     (const GIm__ImCoItem   *message);
size_t g_im__im_co_item__pack
                     (const GIm__ImCoItem   *message,
                      uint8_t             *out);
size_t g_im__im_co_item__pack_to_buffer
                     (const GIm__ImCoItem   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImCoItem *
       g_im__im_co_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_co_item__free_unpacked
                     (GIm__ImCoItem *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImCoData methods */
void   g_im__im_co_data__init
                     (GIm__ImCoData         *message);
size_t g_im__im_co_data__get_packed_size
                     (const GIm__ImCoData   *message);
size_t g_im__im_co_data__pack
                     (const GIm__ImCoData   *message,
                      uint8_t             *out);
size_t g_im__im_co_data__pack_to_buffer
                     (const GIm__ImCoData   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImCoData *
       g_im__im_co_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_co_data__free_unpacked
                     (GIm__ImCoData *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImFanItem methods */
void   g_im__im_fan__item__init
                     (GIm__ImFanItem         *message);
size_t g_im__im_fan__item__get_packed_size
                     (const GIm__ImFanItem   *message);
size_t g_im__im_fan__item__pack
                     (const GIm__ImFanItem   *message,
                      uint8_t             *out);
size_t g_im__im_fan__item__pack_to_buffer
                     (const GIm__ImFanItem   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImFanItem *
       g_im__im_fan__item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_fan__item__free_unpacked
                     (GIm__ImFanItem *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImFanData methods */
void   g_im__im_fan_data__init
                     (GIm__ImFanData         *message);
size_t g_im__im_fan_data__get_packed_size
                     (const GIm__ImFanData   *message);
size_t g_im__im_fan_data__pack
                     (const GIm__ImFanData   *message,
                      uint8_t             *out);
size_t g_im__im_fan_data__pack_to_buffer
                     (const GIm__ImFanData   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImFanData *
       g_im__im_fan_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_fan_data__free_unpacked
                     (GIm__ImFanData *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImTempItem methods */
void   g_im__im_temp_item__init
                     (GIm__ImTempItem         *message);
size_t g_im__im_temp_item__get_packed_size
                     (const GIm__ImTempItem   *message);
size_t g_im__im_temp_item__pack
                     (const GIm__ImTempItem   *message,
                      uint8_t             *out);
size_t g_im__im_temp_item__pack_to_buffer
                     (const GIm__ImTempItem   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImTempItem *
       g_im__im_temp_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_temp_item__free_unpacked
                     (GIm__ImTempItem *message,
                      ProtobufCAllocator *allocator);
/* GIm__EnvTempData methods */
void   g_im__env_temp_data__init
                     (GIm__EnvTempData         *message);
size_t g_im__env_temp_data__get_packed_size
                     (const GIm__EnvTempData   *message);
size_t g_im__env_temp_data__pack
                     (const GIm__EnvTempData   *message,
                      uint8_t             *out);
size_t g_im__env_temp_data__pack_to_buffer
                     (const GIm__EnvTempData   *message,
                      ProtobufCBuffer     *buffer);
GIm__EnvTempData *
       g_im__env_temp_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__env_temp_data__free_unpacked
                     (GIm__EnvTempData *message,
                      ProtobufCAllocator *allocator);
/* GIm__NegativepressureData methods */
void   g_im__negativepressure_data__init
                     (GIm__NegativepressureData         *message);
size_t g_im__negativepressure_data__get_packed_size
                     (const GIm__NegativepressureData   *message);
size_t g_im__negativepressure_data__pack
                     (const GIm__NegativepressureData   *message,
                      uint8_t             *out);
size_t g_im__negativepressure_data__pack_to_buffer
                     (const GIm__NegativepressureData   *message,
                      ProtobufCBuffer     *buffer);
GIm__NegativepressureData *
       g_im__negativepressure_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__negativepressure_data__free_unpacked
                     (GIm__NegativepressureData *message,
                      ProtobufCAllocator *allocator);
/* GIm__AlarmParamData methods */
void   g_im__alarm_param_data__init
                     (GIm__AlarmParamData         *message);
size_t g_im__alarm_param_data__get_packed_size
                     (const GIm__AlarmParamData   *message);
size_t g_im__alarm_param_data__pack
                     (const GIm__AlarmParamData   *message,
                      uint8_t             *out);
size_t g_im__alarm_param_data__pack_to_buffer
                     (const GIm__AlarmParamData   *message,
                      ProtobufCBuffer     *buffer);
GIm__AlarmParamData *
       g_im__alarm_param_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__alarm_param_data__free_unpacked
                     (GIm__AlarmParamData *message,
                      ProtobufCAllocator *allocator);
/* GIm__AlarmSetParamData methods */
void   g_im__alarm_set_param_data__init
                     (GIm__AlarmSetParamData         *message);
size_t g_im__alarm_set_param_data__get_packed_size
                     (const GIm__AlarmSetParamData   *message);
size_t g_im__alarm_set_param_data__pack
                     (const GIm__AlarmSetParamData   *message,
                      uint8_t             *out);
size_t g_im__alarm_set_param_data__pack_to_buffer
                     (const GIm__AlarmSetParamData   *message,
                      ProtobufCBuffer     *buffer);
GIm__AlarmSetParamData *
       g_im__alarm_set_param_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__alarm_set_param_data__free_unpacked
                     (GIm__AlarmSetParamData *message,
                      ProtobufCAllocator *allocator);
/* GIm__SerucrityAlarmData methods */
void   g_im__serucrity_alarm_data__init
                     (GIm__SerucrityAlarmData         *message);
size_t g_im__serucrity_alarm_data__get_packed_size
                     (const GIm__SerucrityAlarmData   *message);
size_t g_im__serucrity_alarm_data__pack
                     (const GIm__SerucrityAlarmData   *message,
                      uint8_t             *out);
size_t g_im__serucrity_alarm_data__pack_to_buffer
                     (const GIm__SerucrityAlarmData   *message,
                      ProtobufCBuffer     *buffer);
GIm__SerucrityAlarmData *
       g_im__serucrity_alarm_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__serucrity_alarm_data__free_unpacked
                     (GIm__SerucrityAlarmData *message,
                      ProtobufCAllocator *allocator);
/* GIm__SerucrityCombinationAlarmData methods */
void   g_im__serucrity_combination_alarm_data__init
                     (GIm__SerucrityCombinationAlarmData         *message);
size_t g_im__serucrity_combination_alarm_data__get_packed_size
                     (const GIm__SerucrityCombinationAlarmData   *message);
size_t g_im__serucrity_combination_alarm_data__pack
                     (const GIm__SerucrityCombinationAlarmData   *message,
                      uint8_t             *out);
size_t g_im__serucrity_combination_alarm_data__pack_to_buffer
                     (const GIm__SerucrityCombinationAlarmData   *message,
                      ProtobufCBuffer     *buffer);
GIm__SerucrityCombinationAlarmData *
       g_im__serucrity_combination_alarm_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__serucrity_combination_alarm_data__free_unpacked
                     (GIm__SerucrityCombinationAlarmData *message,
                      ProtobufCAllocator *allocator);
/* GIm__LowercomputerData methods */
void   g_im__lowercomputer_data__init
                     (GIm__LowercomputerData         *message);
size_t g_im__lowercomputer_data__get_packed_size
                     (const GIm__LowercomputerData   *message);
size_t g_im__lowercomputer_data__pack
                     (const GIm__LowercomputerData   *message,
                      uint8_t             *out);
size_t g_im__lowercomputer_data__pack_to_buffer
                     (const GIm__LowercomputerData   *message,
                      ProtobufCBuffer     *buffer);
GIm__LowercomputerData *
       g_im__lowercomputer_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__lowercomputer_data__free_unpacked
                     (GIm__LowercomputerData *message,
                      ProtobufCAllocator *allocator);
/* GIm__PlcFailureData methods */
void   g_im__plc_failure_data__init
                     (GIm__PlcFailureData         *message);
size_t g_im__plc_failure_data__get_packed_size
                     (const GIm__PlcFailureData   *message);
size_t g_im__plc_failure_data__pack
                     (const GIm__PlcFailureData   *message,
                      uint8_t             *out);
size_t g_im__plc_failure_data__pack_to_buffer
                     (const GIm__PlcFailureData   *message,
                      ProtobufCBuffer     *buffer);
GIm__PlcFailureData *
       g_im__plc_failure_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__plc_failure_data__free_unpacked
                     (GIm__PlcFailureData *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImStockSecurityInfo methods */
void   g_im__im_stock_security_info__init
                     (GIm__ImStockSecurityInfo         *message);
size_t g_im__im_stock_security_info__get_packed_size
                     (const GIm__ImStockSecurityInfo   *message);
size_t g_im__im_stock_security_info__pack
                     (const GIm__ImStockSecurityInfo   *message,
                      uint8_t             *out);
size_t g_im__im_stock_security_info__pack_to_buffer
                     (const GIm__ImStockSecurityInfo   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImStockSecurityInfo *
       g_im__im_stock_security_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_stock_security_info__free_unpacked
                     (GIm__ImStockSecurityInfo *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImSecurityData methods */
void   g_im__im_security_data__init
                     (GIm__ImSecurityData         *message);
size_t g_im__im_security_data__get_packed_size
                     (const GIm__ImSecurityData   *message);
size_t g_im__im_security_data__pack
                     (const GIm__ImSecurityData   *message,
                      uint8_t             *out);
size_t g_im__im_security_data__pack_to_buffer
                     (const GIm__ImSecurityData   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImSecurityData *
       g_im__im_security_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_security_data__free_unpacked
                     (GIm__ImSecurityData *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImDeviceUpdateInfo methods */
void   g_im__im_device_update_info__init
                     (GIm__ImDeviceUpdateInfo         *message);
size_t g_im__im_device_update_info__get_packed_size
                     (const GIm__ImDeviceUpdateInfo   *message);
size_t g_im__im_device_update_info__pack
                     (const GIm__ImDeviceUpdateInfo   *message,
                      uint8_t             *out);
size_t g_im__im_device_update_info__pack_to_buffer
                     (const GIm__ImDeviceUpdateInfo   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImDeviceUpdateInfo *
       g_im__im_device_update_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_device_update_info__free_unpacked
                     (GIm__ImDeviceUpdateInfo *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImDevicePassthroughResponse methods */
void   g_im__im_device_passthrough_response__init
                     (GIm__ImDevicePassthroughResponse         *message);
size_t g_im__im_device_passthrough_response__get_packed_size
                     (const GIm__ImDevicePassthroughResponse   *message);
size_t g_im__im_device_passthrough_response__pack
                     (const GIm__ImDevicePassthroughResponse   *message,
                      uint8_t             *out);
size_t g_im__im_device_passthrough_response__pack_to_buffer
                     (const GIm__ImDevicePassthroughResponse   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImDevicePassthroughResponse *
       g_im__im_device_passthrough_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_device_passthrough_response__free_unpacked
                     (GIm__ImDevicePassthroughResponse *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImDeviceUpgradeData methods */
void   g_im__im_device_upgrade_data__init
                     (GIm__ImDeviceUpgradeData         *message);
size_t g_im__im_device_upgrade_data__get_packed_size
                     (const GIm__ImDeviceUpgradeData   *message);
size_t g_im__im_device_upgrade_data__pack
                     (const GIm__ImDeviceUpgradeData   *message,
                      uint8_t             *out);
size_t g_im__im_device_upgrade_data__pack_to_buffer
                     (const GIm__ImDeviceUpgradeData   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImDeviceUpgradeData *
       g_im__im_device_upgrade_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_device_upgrade_data__free_unpacked
                     (GIm__ImDeviceUpgradeData *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImDeviceUpgradNotify methods */
void   g_im__im_device_upgrad_notify__init
                     (GIm__ImDeviceUpgradNotify         *message);
size_t g_im__im_device_upgrad_notify__get_packed_size
                     (const GIm__ImDeviceUpgradNotify   *message);
size_t g_im__im_device_upgrad_notify__pack
                     (const GIm__ImDeviceUpgradNotify   *message,
                      uint8_t             *out);
size_t g_im__im_device_upgrad_notify__pack_to_buffer
                     (const GIm__ImDeviceUpgradNotify   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImDeviceUpgradNotify *
       g_im__im_device_upgrad_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_device_upgrad_notify__free_unpacked
                     (GIm__ImDeviceUpgradNotify *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImNetcardParam methods */
void   g_im__im_netcard_param__init
                     (GIm__ImNetcardParam         *message);
size_t g_im__im_netcard_param__get_packed_size
                     (const GIm__ImNetcardParam   *message);
size_t g_im__im_netcard_param__pack
                     (const GIm__ImNetcardParam   *message,
                      uint8_t             *out);
size_t g_im__im_netcard_param__pack_to_buffer
                     (const GIm__ImNetcardParam   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImNetcardParam *
       g_im__im_netcard_param__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_netcard_param__free_unpacked
                     (GIm__ImNetcardParam *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImMasterChannelRet methods */
void   g_im__im_master_channel_ret__init
                     (GIm__ImMasterChannelRet         *message);
size_t g_im__im_master_channel_ret__get_packed_size
                     (const GIm__ImMasterChannelRet   *message);
size_t g_im__im_master_channel_ret__pack
                     (const GIm__ImMasterChannelRet   *message,
                      uint8_t             *out);
size_t g_im__im_master_channel_ret__pack_to_buffer
                     (const GIm__ImMasterChannelRet   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImMasterChannelRet *
       g_im__im_master_channel_ret__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_master_channel_ret__free_unpacked
                     (GIm__ImMasterChannelRet *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImStepJump methods */
void   g_im__im_step_jump__init
                     (GIm__ImStepJump         *message);
size_t g_im__im_step_jump__get_packed_size
                     (const GIm__ImStepJump   *message);
size_t g_im__im_step_jump__pack
                     (const GIm__ImStepJump   *message,
                      uint8_t             *out);
size_t g_im__im_step_jump__pack_to_buffer
                     (const GIm__ImStepJump   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImStepJump *
       g_im__im_step_jump__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_step_jump__free_unpacked
                     (GIm__ImStepJump *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImChannelContinueRet methods */
void   g_im__im_channel_continue_ret__init
                     (GIm__ImChannelContinueRet         *message);
size_t g_im__im_channel_continue_ret__get_packed_size
                     (const GIm__ImChannelContinueRet   *message);
size_t g_im__im_channel_continue_ret__pack
                     (const GIm__ImChannelContinueRet   *message,
                      uint8_t             *out);
size_t g_im__im_channel_continue_ret__pack_to_buffer
                     (const GIm__ImChannelContinueRet   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImChannelContinueRet *
       g_im__im_channel_continue_ret__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_channel_continue_ret__free_unpacked
                     (GIm__ImChannelContinueRet *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImChannelEnableByipResult methods */
void   g_im__im_channel_enable_byip_result__init
                     (GIm__ImChannelEnableByipResult         *message);
size_t g_im__im_channel_enable_byip_result__get_packed_size
                     (const GIm__ImChannelEnableByipResult   *message);
size_t g_im__im_channel_enable_byip_result__pack
                     (const GIm__ImChannelEnableByipResult   *message,
                      uint8_t             *out);
size_t g_im__im_channel_enable_byip_result__pack_to_buffer
                     (const GIm__ImChannelEnableByipResult   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImChannelEnableByipResult *
       g_im__im_channel_enable_byip_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_channel_enable_byip_result__free_unpacked
                     (GIm__ImChannelEnableByipResult *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImChannelAppointStop methods */
void   g_im__im_channel_appoint_stop__init
                     (GIm__ImChannelAppointStop         *message);
size_t g_im__im_channel_appoint_stop__get_packed_size
                     (const GIm__ImChannelAppointStop   *message);
size_t g_im__im_channel_appoint_stop__pack
                     (const GIm__ImChannelAppointStop   *message,
                      uint8_t             *out);
size_t g_im__im_channel_appoint_stop__pack_to_buffer
                     (const GIm__ImChannelAppointStop   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImChannelAppointStop *
       g_im__im_channel_appoint_stop__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_channel_appoint_stop__free_unpacked
                     (GIm__ImChannelAppointStop *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImSecurityStopByStock methods */
void   g_im__im_security_stop_by_stock__init
                     (GIm__ImSecurityStopByStock         *message);
size_t g_im__im_security_stop_by_stock__get_packed_size
                     (const GIm__ImSecurityStopByStock   *message);
size_t g_im__im_security_stop_by_stock__pack
                     (const GIm__ImSecurityStopByStock   *message,
                      uint8_t             *out);
size_t g_im__im_security_stop_by_stock__pack_to_buffer
                     (const GIm__ImSecurityStopByStock   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImSecurityStopByStock *
       g_im__im_security_stop_by_stock__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_security_stop_by_stock__free_unpacked
                     (GIm__ImSecurityStopByStock *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImChannelTest methods */
void   g_im__im_channel_test__init
                     (GIm__ImChannelTest         *message);
size_t g_im__im_channel_test__get_packed_size
                     (const GIm__ImChannelTest   *message);
size_t g_im__im_channel_test__pack
                     (const GIm__ImChannelTest   *message,
                      uint8_t             *out);
size_t g_im__im_channel_test__pack_to_buffer
                     (const GIm__ImChannelTest   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImChannelTest *
       g_im__im_channel_test__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_channel_test__free_unpacked
                     (GIm__ImChannelTest *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImChannelClearWarn methods */
void   g_im__im_channel_clear_warn__init
                     (GIm__ImChannelClearWarn         *message);
size_t g_im__im_channel_clear_warn__get_packed_size
                     (const GIm__ImChannelClearWarn   *message);
size_t g_im__im_channel_clear_warn__pack
                     (const GIm__ImChannelClearWarn   *message,
                      uint8_t             *out);
size_t g_im__im_channel_clear_warn__pack_to_buffer
                     (const GIm__ImChannelClearWarn   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImChannelClearWarn *
       g_im__im_channel_clear_warn__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_channel_clear_warn__free_unpacked
                     (GIm__ImChannelClearWarn *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImSecurityClearWarn methods */
void   g_im__im_security_clear_warn__init
                     (GIm__ImSecurityClearWarn         *message);
size_t g_im__im_security_clear_warn__get_packed_size
                     (const GIm__ImSecurityClearWarn   *message);
size_t g_im__im_security_clear_warn__pack
                     (const GIm__ImSecurityClearWarn   *message,
                      uint8_t             *out);
size_t g_im__im_security_clear_warn__pack_to_buffer
                     (const GIm__ImSecurityClearWarn   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImSecurityClearWarn *
       g_im__im_security_clear_warn__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_security_clear_warn__free_unpacked
                     (GIm__ImSecurityClearWarn *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImDisplayTimeProtection methods */
void   g_im__im_display_time_protection__init
                     (GIm__ImDisplayTimeProtection         *message);
size_t g_im__im_display_time_protection__get_packed_size
                     (const GIm__ImDisplayTimeProtection   *message);
size_t g_im__im_display_time_protection__pack
                     (const GIm__ImDisplayTimeProtection   *message,
                      uint8_t             *out);
size_t g_im__im_display_time_protection__pack_to_buffer
                     (const GIm__ImDisplayTimeProtection   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImDisplayTimeProtection *
       g_im__im_display_time_protection__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_display_time_protection__free_unpacked
                     (GIm__ImDisplayTimeProtection *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImSoftUpdate methods */
void   g_im__im_soft_update__init
                     (GIm__ImSoftUpdate         *message);
size_t g_im__im_soft_update__get_packed_size
                     (const GIm__ImSoftUpdate   *message);
size_t g_im__im_soft_update__pack
                     (const GIm__ImSoftUpdate   *message,
                      uint8_t             *out);
size_t g_im__im_soft_update__pack_to_buffer
                     (const GIm__ImSoftUpdate   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImSoftUpdate *
       g_im__im_soft_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_soft_update__free_unpacked
                     (GIm__ImSoftUpdate *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImDeviceUpdate methods */
void   g_im__im_device_update__init
                     (GIm__ImDeviceUpdate         *message);
size_t g_im__im_device_update__get_packed_size
                     (const GIm__ImDeviceUpdate   *message);
size_t g_im__im_device_update__pack
                     (const GIm__ImDeviceUpdate   *message,
                      uint8_t             *out);
size_t g_im__im_device_update__pack_to_buffer
                     (const GIm__ImDeviceUpdate   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImDeviceUpdate *
       g_im__im_device_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_device_update__free_unpacked
                     (GIm__ImDeviceUpdate *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImDevicePassthrough methods */
void   g_im__im_device_passthrough__init
                     (GIm__ImDevicePassthrough         *message);
size_t g_im__im_device_passthrough__get_packed_size
                     (const GIm__ImDevicePassthrough   *message);
size_t g_im__im_device_passthrough__pack
                     (const GIm__ImDevicePassthrough   *message,
                      uint8_t             *out);
size_t g_im__im_device_passthrough__pack_to_buffer
                     (const GIm__ImDevicePassthrough   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImDevicePassthrough *
       g_im__im_device_passthrough__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_device_passthrough__free_unpacked
                     (GIm__ImDevicePassthrough *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImCmdRequest methods */
void   g_im__im_cmd_request__init
                     (GIm__ImCmdRequest         *message);
size_t g_im__im_cmd_request__get_packed_size
                     (const GIm__ImCmdRequest   *message);
size_t g_im__im_cmd_request__pack
                     (const GIm__ImCmdRequest   *message,
                      uint8_t             *out);
size_t g_im__im_cmd_request__pack_to_buffer
                     (const GIm__ImCmdRequest   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImCmdRequest *
       g_im__im_cmd_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_cmd_request__free_unpacked
                     (GIm__ImCmdRequest *message,
                      ProtobufCAllocator *allocator);
/* GIm__ExecuteSerucrityResult methods */
void   g_im__execute_serucrity_result__init
                     (GIm__ExecuteSerucrityResult         *message);
size_t g_im__execute_serucrity_result__get_packed_size
                     (const GIm__ExecuteSerucrityResult   *message);
size_t g_im__execute_serucrity_result__pack
                     (const GIm__ExecuteSerucrityResult   *message,
                      uint8_t             *out);
size_t g_im__execute_serucrity_result__pack_to_buffer
                     (const GIm__ExecuteSerucrityResult   *message,
                      ProtobufCBuffer     *buffer);
GIm__ExecuteSerucrityResult *
       g_im__execute_serucrity_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__execute_serucrity_result__free_unpacked
                     (GIm__ExecuteSerucrityResult *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImCmdResponse methods */
void   g_im__im_cmd_response__init
                     (GIm__ImCmdResponse         *message);
size_t g_im__im_cmd_response__get_packed_size
                     (const GIm__ImCmdResponse   *message);
size_t g_im__im_cmd_response__pack
                     (const GIm__ImCmdResponse   *message,
                      uint8_t             *out);
size_t g_im__im_cmd_response__pack_to_buffer
                     (const GIm__ImCmdResponse   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImCmdResponse *
       g_im__im_cmd_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_cmd_response__free_unpacked
                     (GIm__ImCmdResponse *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImChnnelWarn methods */
void   g_im__im_chnnel_warn__init
                     (GIm__ImChnnelWarn         *message);
size_t g_im__im_chnnel_warn__get_packed_size
                     (const GIm__ImChnnelWarn   *message);
size_t g_im__im_chnnel_warn__pack
                     (const GIm__ImChnnelWarn   *message,
                      uint8_t             *out);
size_t g_im__im_chnnel_warn__pack_to_buffer
                     (const GIm__ImChnnelWarn   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImChnnelWarn *
       g_im__im_chnnel_warn__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_chnnel_warn__free_unpacked
                     (GIm__ImChnnelWarn *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImExternData methods */
void   g_im__im_extern_data__init
                     (GIm__ImExternData         *message);
size_t g_im__im_extern_data__get_packed_size
                     (const GIm__ImExternData   *message);
size_t g_im__im_extern_data__pack
                     (const GIm__ImExternData   *message,
                      uint8_t             *out);
size_t g_im__im_extern_data__pack_to_buffer
                     (const GIm__ImExternData   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImExternData *
       g_im__im_extern_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_extern_data__free_unpacked
                     (GIm__ImExternData *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImChannelParam methods */
void   g_im__im_channel_param__init
                     (GIm__ImChannelParam         *message);
size_t g_im__im_channel_param__get_packed_size
                     (const GIm__ImChannelParam   *message);
size_t g_im__im_channel_param__pack
                     (const GIm__ImChannelParam   *message,
                      uint8_t             *out);
size_t g_im__im_channel_param__pack_to_buffer
                     (const GIm__ImChannelParam   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImChannelParam *
       g_im__im_channel_param__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_channel_param__free_unpacked
                     (GIm__ImChannelParam *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImCellParam methods */
void   g_im__im_cell_param__init
                     (GIm__ImCellParam         *message);
size_t g_im__im_cell_param__get_packed_size
                     (const GIm__ImCellParam   *message);
size_t g_im__im_cell_param__pack
                     (const GIm__ImCellParam   *message,
                      uint8_t             *out);
size_t g_im__im_cell_param__pack_to_buffer
                     (const GIm__ImCellParam   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImCellParam *
       g_im__im_cell_param__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_cell_param__free_unpacked
                     (GIm__ImCellParam *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImUiData methods */
void   g_im__im_ui_data__init
                     (GIm__ImUiData         *message);
size_t g_im__im_ui_data__get_packed_size
                     (const GIm__ImUiData   *message);
size_t g_im__im_ui_data__pack
                     (const GIm__ImUiData   *message,
                      uint8_t             *out);
size_t g_im__im_ui_data__pack_to_buffer
                     (const GIm__ImUiData   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImUiData *
       g_im__im_ui_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_ui_data__free_unpacked
                     (GIm__ImUiData *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImUiDataResponse methods */
void   g_im__im_ui_data_response__init
                     (GIm__ImUiDataResponse         *message);
size_t g_im__im_ui_data_response__get_packed_size
                     (const GIm__ImUiDataResponse   *message);
size_t g_im__im_ui_data_response__pack
                     (const GIm__ImUiDataResponse   *message,
                      uint8_t             *out);
size_t g_im__im_ui_data_response__pack_to_buffer
                     (const GIm__ImUiDataResponse   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImUiDataResponse *
       g_im__im_ui_data_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_ui_data_response__free_unpacked
                     (GIm__ImUiDataResponse *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImAjustRequest methods */
void   g_im__im_ajust_request__init
                     (GIm__ImAjustRequest         *message);
size_t g_im__im_ajust_request__get_packed_size
                     (const GIm__ImAjustRequest   *message);
size_t g_im__im_ajust_request__pack
                     (const GIm__ImAjustRequest   *message,
                      uint8_t             *out);
size_t g_im__im_ajust_request__pack_to_buffer
                     (const GIm__ImAjustRequest   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImAjustRequest *
       g_im__im_ajust_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_ajust_request__free_unpacked
                     (GIm__ImAjustRequest *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImAjustResponse methods */
void   g_im__im_ajust_response__init
                     (GIm__ImAjustResponse         *message);
size_t g_im__im_ajust_response__get_packed_size
                     (const GIm__ImAjustResponse   *message);
size_t g_im__im_ajust_response__pack
                     (const GIm__ImAjustResponse   *message,
                      uint8_t             *out);
size_t g_im__im_ajust_response__pack_to_buffer
                     (const GIm__ImAjustResponse   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImAjustResponse *
       g_im__im_ajust_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_ajust_response__free_unpacked
                     (GIm__ImAjustResponse *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImDebugRequest methods */
void   g_im__im_debug_request__init
                     (GIm__ImDebugRequest         *message);
size_t g_im__im_debug_request__get_packed_size
                     (const GIm__ImDebugRequest   *message);
size_t g_im__im_debug_request__pack
                     (const GIm__ImDebugRequest   *message,
                      uint8_t             *out);
size_t g_im__im_debug_request__pack_to_buffer
                     (const GIm__ImDebugRequest   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImDebugRequest *
       g_im__im_debug_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_debug_request__free_unpacked
                     (GIm__ImDebugRequest *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImDebugResponse methods */
void   g_im__im_debug_response__init
                     (GIm__ImDebugResponse         *message);
size_t g_im__im_debug_response__get_packed_size
                     (const GIm__ImDebugResponse   *message);
size_t g_im__im_debug_response__pack
                     (const GIm__ImDebugResponse   *message,
                      uint8_t             *out);
size_t g_im__im_debug_response__pack_to_buffer
                     (const GIm__ImDebugResponse   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImDebugResponse *
       g_im__im_debug_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_debug_response__free_unpacked
                     (GIm__ImDebugResponse *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImEepromRequest methods */
void   g_im__im_eeprom_request__init
                     (GIm__ImEepromRequest         *message);
size_t g_im__im_eeprom_request__get_packed_size
                     (const GIm__ImEepromRequest   *message);
size_t g_im__im_eeprom_request__pack
                     (const GIm__ImEepromRequest   *message,
                      uint8_t             *out);
size_t g_im__im_eeprom_request__pack_to_buffer
                     (const GIm__ImEepromRequest   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImEepromRequest *
       g_im__im_eeprom_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_eeprom_request__free_unpacked
                     (GIm__ImEepromRequest *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImEepromReadResponse methods */
void   g_im__im_eeprom_read_response__init
                     (GIm__ImEepromReadResponse         *message);
size_t g_im__im_eeprom_read_response__get_packed_size
                     (const GIm__ImEepromReadResponse   *message);
size_t g_im__im_eeprom_read_response__pack
                     (const GIm__ImEepromReadResponse   *message,
                      uint8_t             *out);
size_t g_im__im_eeprom_read_response__pack_to_buffer
                     (const GIm__ImEepromReadResponse   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImEepromReadResponse *
       g_im__im_eeprom_read_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_eeprom_read_response__free_unpacked
                     (GIm__ImEepromReadResponse *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImEepromWriteResponse methods */
void   g_im__im_eeprom_write_response__init
                     (GIm__ImEepromWriteResponse         *message);
size_t g_im__im_eeprom_write_response__get_packed_size
                     (const GIm__ImEepromWriteResponse   *message);
size_t g_im__im_eeprom_write_response__pack
                     (const GIm__ImEepromWriteResponse   *message,
                      uint8_t             *out);
size_t g_im__im_eeprom_write_response__pack_to_buffer
                     (const GIm__ImEepromWriteResponse   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImEepromWriteResponse *
       g_im__im_eeprom_write_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_eeprom_write_response__free_unpacked
                     (GIm__ImEepromWriteResponse *message,
                      ProtobufCAllocator *allocator);
/* GIm__NegativePressureParam methods */
void   g_im__negative_pressure_param__init
                     (GIm__NegativePressureParam         *message);
size_t g_im__negative_pressure_param__get_packed_size
                     (const GIm__NegativePressureParam   *message);
size_t g_im__negative_pressure_param__pack
                     (const GIm__NegativePressureParam   *message,
                      uint8_t             *out);
size_t g_im__negative_pressure_param__pack_to_buffer
                     (const GIm__NegativePressureParam   *message,
                      ProtobufCBuffer     *buffer);
GIm__NegativePressureParam *
       g_im__negative_pressure_param__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__negative_pressure_param__free_unpacked
                     (GIm__NegativePressureParam *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImNegativePressureRequest methods */
void   g_im__im_negative_pressure_request__init
                     (GIm__ImNegativePressureRequest         *message);
size_t g_im__im_negative_pressure_request__get_packed_size
                     (const GIm__ImNegativePressureRequest   *message);
size_t g_im__im_negative_pressure_request__pack
                     (const GIm__ImNegativePressureRequest   *message,
                      uint8_t             *out);
size_t g_im__im_negative_pressure_request__pack_to_buffer
                     (const GIm__ImNegativePressureRequest   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImNegativePressureRequest *
       g_im__im_negative_pressure_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_negative_pressure_request__free_unpacked
                     (GIm__ImNegativePressureRequest *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImNegativePressureResponse methods */
void   g_im__im_negative_pressure_response__init
                     (GIm__ImNegativePressureResponse         *message);
size_t g_im__im_negative_pressure_response__get_packed_size
                     (const GIm__ImNegativePressureResponse   *message);
size_t g_im__im_negative_pressure_response__pack
                     (const GIm__ImNegativePressureResponse   *message,
                      uint8_t             *out);
size_t g_im__im_negative_pressure_response__pack_to_buffer
                     (const GIm__ImNegativePressureResponse   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImNegativePressureResponse *
       g_im__im_negative_pressure_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_negative_pressure_response__free_unpacked
                     (GIm__ImNegativePressureResponse *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImVersionQueryRequest methods */
void   g_im__im_version_query_request__init
                     (GIm__ImVersionQueryRequest         *message);
size_t g_im__im_version_query_request__get_packed_size
                     (const GIm__ImVersionQueryRequest   *message);
size_t g_im__im_version_query_request__pack
                     (const GIm__ImVersionQueryRequest   *message,
                      uint8_t             *out);
size_t g_im__im_version_query_request__pack_to_buffer
                     (const GIm__ImVersionQueryRequest   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImVersionQueryRequest *
       g_im__im_version_query_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_version_query_request__free_unpacked
                     (GIm__ImVersionQueryRequest *message,
                      ProtobufCAllocator *allocator);
/* GIm__ImVersionQueryResponse methods */
void   g_im__im_version_query_response__init
                     (GIm__ImVersionQueryResponse         *message);
size_t g_im__im_version_query_response__get_packed_size
                     (const GIm__ImVersionQueryResponse   *message);
size_t g_im__im_version_query_response__pack
                     (const GIm__ImVersionQueryResponse   *message,
                      uint8_t             *out);
size_t g_im__im_version_query_response__pack_to_buffer
                     (const GIm__ImVersionQueryResponse   *message,
                      ProtobufCBuffer     *buffer);
GIm__ImVersionQueryResponse *
       g_im__im_version_query_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   g_im__im_version_query_response__free_unpacked
                     (GIm__ImVersionQueryResponse *message,
                      ProtobufCAllocator *allocator);

/* --- data packers and unpackers -- */

/* g_im__im_cmd_head packer and unpacker methods */
size_t
g_im__im_cmd_head_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_cmd_head_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_cmd_head_free (grpc_c_context_t *context, void *buf);
/* g_im__im_auth packer and unpacker methods */
size_t
g_im__im_auth_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_auth_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_auth_free (grpc_c_context_t *context, void *buf);
/* g_im__im_data_store4unit packer and unpacker methods */
size_t
g_im__im_data_store4unit_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_data_store4unit_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_data_store4unit_free (grpc_c_context_t *context, void *buf);
/* g_im__im_data_store4alarm packer and unpacker methods */
size_t
g_im__im_data_store4alarm_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_data_store4alarm_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_data_store4alarm_free (grpc_c_context_t *context, void *buf);
/* g_im__smoke_item packer and unpacker methods */
size_t
g_im__smoke_item_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__smoke_item_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__smoke_item_free (grpc_c_context_t *context, void *buf);
/* g_im__smoke_data packer and unpacker methods */
size_t
g_im__smoke_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__smoke_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__smoke_data_free (grpc_c_context_t *context, void *buf);
/* g_im__im_co_item packer and unpacker methods */
size_t
g_im__im_co_item_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_co_item_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_co_item_free (grpc_c_context_t *context, void *buf);
/* g_im__im_co_data packer and unpacker methods */
size_t
g_im__im_co_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_co_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_co_data_free (grpc_c_context_t *context, void *buf);
/* g_im__im_fan__item packer and unpacker methods */
size_t
g_im__im_fan__item_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_fan__item_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_fan__item_free (grpc_c_context_t *context, void *buf);
/* g_im__im_fan_data packer and unpacker methods */
size_t
g_im__im_fan_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_fan_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_fan_data_free (grpc_c_context_t *context, void *buf);
/* g_im__im_temp_item packer and unpacker methods */
size_t
g_im__im_temp_item_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_temp_item_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_temp_item_free (grpc_c_context_t *context, void *buf);
/* g_im__env_temp_data packer and unpacker methods */
size_t
g_im__env_temp_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__env_temp_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__env_temp_data_free (grpc_c_context_t *context, void *buf);
/* g_im__negativepressure_data packer and unpacker methods */
size_t
g_im__negativepressure_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__negativepressure_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__negativepressure_data_free (grpc_c_context_t *context, void *buf);
/* g_im__alarm_param_data packer and unpacker methods */
size_t
g_im__alarm_param_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__alarm_param_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__alarm_param_data_free (grpc_c_context_t *context, void *buf);
/* g_im__alarm_set_param_data packer and unpacker methods */
size_t
g_im__alarm_set_param_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__alarm_set_param_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__alarm_set_param_data_free (grpc_c_context_t *context, void *buf);
/* g_im__serucrity_alarm_data packer and unpacker methods */
size_t
g_im__serucrity_alarm_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__serucrity_alarm_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__serucrity_alarm_data_free (grpc_c_context_t *context, void *buf);
/* g_im__serucrity_combination_alarm_data packer and unpacker methods */
size_t
g_im__serucrity_combination_alarm_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__serucrity_combination_alarm_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__serucrity_combination_alarm_data_free (grpc_c_context_t *context, void *buf);
/* g_im__lowercomputer_data packer and unpacker methods */
size_t
g_im__lowercomputer_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__lowercomputer_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__lowercomputer_data_free (grpc_c_context_t *context, void *buf);
/* g_im__plc_failure_data packer and unpacker methods */
size_t
g_im__plc_failure_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__plc_failure_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__plc_failure_data_free (grpc_c_context_t *context, void *buf);
/* g_im__im_stock_security_info packer and unpacker methods */
size_t
g_im__im_stock_security_info_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_stock_security_info_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_stock_security_info_free (grpc_c_context_t *context, void *buf);
/* g_im__im_security_data packer and unpacker methods */
size_t
g_im__im_security_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_security_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_security_data_free (grpc_c_context_t *context, void *buf);
/* g_im__im_device_update_info packer and unpacker methods */
size_t
g_im__im_device_update_info_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_device_update_info_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_device_update_info_free (grpc_c_context_t *context, void *buf);
/* g_im__im_device_passthrough_response packer and unpacker methods */
size_t
g_im__im_device_passthrough_response_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_device_passthrough_response_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_device_passthrough_response_free (grpc_c_context_t *context, void *buf);
/* g_im__im_device_upgrade_data packer and unpacker methods */
size_t
g_im__im_device_upgrade_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_device_upgrade_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_device_upgrade_data_free (grpc_c_context_t *context, void *buf);
/* g_im__im_device_upgrad_notify packer and unpacker methods */
size_t
g_im__im_device_upgrad_notify_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_device_upgrad_notify_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_device_upgrad_notify_free (grpc_c_context_t *context, void *buf);
/* g_im__im_netcard_param packer and unpacker methods */
size_t
g_im__im_netcard_param_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_netcard_param_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_netcard_param_free (grpc_c_context_t *context, void *buf);
/* g_im__im_master_channel_ret packer and unpacker methods */
size_t
g_im__im_master_channel_ret_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_master_channel_ret_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_master_channel_ret_free (grpc_c_context_t *context, void *buf);
/* g_im__im_step_jump packer and unpacker methods */
size_t
g_im__im_step_jump_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_step_jump_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_step_jump_free (grpc_c_context_t *context, void *buf);
/* g_im__im_channel_continue_ret packer and unpacker methods */
size_t
g_im__im_channel_continue_ret_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_channel_continue_ret_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_channel_continue_ret_free (grpc_c_context_t *context, void *buf);
/* g_im__im_channel_enable_byip_result packer and unpacker methods */
size_t
g_im__im_channel_enable_byip_result_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_channel_enable_byip_result_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_channel_enable_byip_result_free (grpc_c_context_t *context, void *buf);
/* g_im__im_channel_appoint_stop packer and unpacker methods */
size_t
g_im__im_channel_appoint_stop_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_channel_appoint_stop_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_channel_appoint_stop_free (grpc_c_context_t *context, void *buf);
/* g_im__im_security_stop_by_stock packer and unpacker methods */
size_t
g_im__im_security_stop_by_stock_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_security_stop_by_stock_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_security_stop_by_stock_free (grpc_c_context_t *context, void *buf);
/* g_im__im_channel_test packer and unpacker methods */
size_t
g_im__im_channel_test_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_channel_test_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_channel_test_free (grpc_c_context_t *context, void *buf);
/* g_im__im_channel_clear_warn packer and unpacker methods */
size_t
g_im__im_channel_clear_warn_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_channel_clear_warn_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_channel_clear_warn_free (grpc_c_context_t *context, void *buf);
/* g_im__im_security_clear_warn packer and unpacker methods */
size_t
g_im__im_security_clear_warn_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_security_clear_warn_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_security_clear_warn_free (grpc_c_context_t *context, void *buf);
/* g_im__im_display_time_protection packer and unpacker methods */
size_t
g_im__im_display_time_protection_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_display_time_protection_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_display_time_protection_free (grpc_c_context_t *context, void *buf);
/* g_im__im_soft_update packer and unpacker methods */
size_t
g_im__im_soft_update_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_soft_update_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_soft_update_free (grpc_c_context_t *context, void *buf);
/* g_im__im_device_update packer and unpacker methods */
size_t
g_im__im_device_update_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_device_update_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_device_update_free (grpc_c_context_t *context, void *buf);
/* g_im__im_device_passthrough packer and unpacker methods */
size_t
g_im__im_device_passthrough_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_device_passthrough_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_device_passthrough_free (grpc_c_context_t *context, void *buf);
/* g_im__im_cmd_request packer and unpacker methods */
size_t
g_im__im_cmd_request_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_cmd_request_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_cmd_request_free (grpc_c_context_t *context, void *buf);
/* g_im__execute_serucrity_result packer and unpacker methods */
size_t
g_im__execute_serucrity_result_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__execute_serucrity_result_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__execute_serucrity_result_free (grpc_c_context_t *context, void *buf);
/* g_im__im_cmd_response packer and unpacker methods */
size_t
g_im__im_cmd_response_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_cmd_response_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_cmd_response_free (grpc_c_context_t *context, void *buf);
/* g_im__im_chnnel_warn packer and unpacker methods */
size_t
g_im__im_chnnel_warn_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_chnnel_warn_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_chnnel_warn_free (grpc_c_context_t *context, void *buf);
/* g_im__im_extern_data packer and unpacker methods */
size_t
g_im__im_extern_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_extern_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_extern_data_free (grpc_c_context_t *context, void *buf);
/* g_im__im_channel_param packer and unpacker methods */
size_t
g_im__im_channel_param_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_channel_param_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_channel_param_free (grpc_c_context_t *context, void *buf);
/* g_im__im_cell_param packer and unpacker methods */
size_t
g_im__im_cell_param_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_cell_param_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_cell_param_free (grpc_c_context_t *context, void *buf);
/* g_im__im_ui_data packer and unpacker methods */
size_t
g_im__im_ui_data_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_ui_data_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_ui_data_free (grpc_c_context_t *context, void *buf);
/* g_im__im_ui_data_response packer and unpacker methods */
size_t
g_im__im_ui_data_response_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_ui_data_response_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_ui_data_response_free (grpc_c_context_t *context, void *buf);
/* g_im__im_ajust_request packer and unpacker methods */
size_t
g_im__im_ajust_request_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_ajust_request_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_ajust_request_free (grpc_c_context_t *context, void *buf);
/* g_im__im_ajust_response packer and unpacker methods */
size_t
g_im__im_ajust_response_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_ajust_response_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_ajust_response_free (grpc_c_context_t *context, void *buf);
/* g_im__im_debug_request packer and unpacker methods */
size_t
g_im__im_debug_request_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_debug_request_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_debug_request_free (grpc_c_context_t *context, void *buf);
/* g_im__im_debug_response packer and unpacker methods */
size_t
g_im__im_debug_response_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_debug_response_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_debug_response_free (grpc_c_context_t *context, void *buf);
/* g_im__im_eeprom_request packer and unpacker methods */
size_t
g_im__im_eeprom_request_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_eeprom_request_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_eeprom_request_free (grpc_c_context_t *context, void *buf);
/* g_im__im_eeprom_read_response packer and unpacker methods */
size_t
g_im__im_eeprom_read_response_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_eeprom_read_response_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_eeprom_read_response_free (grpc_c_context_t *context, void *buf);
/* g_im__im_eeprom_write_response packer and unpacker methods */
size_t
g_im__im_eeprom_write_response_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_eeprom_write_response_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_eeprom_write_response_free (grpc_c_context_t *context, void *buf);
/* g_im__negative_pressure_param packer and unpacker methods */
size_t
g_im__negative_pressure_param_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__negative_pressure_param_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__negative_pressure_param_free (grpc_c_context_t *context, void *buf);
/* g_im__im_negative_pressure_request packer and unpacker methods */
size_t
g_im__im_negative_pressure_request_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_negative_pressure_request_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_negative_pressure_request_free (grpc_c_context_t *context, void *buf);
/* g_im__im_negative_pressure_response packer and unpacker methods */
size_t
g_im__im_negative_pressure_response_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_negative_pressure_response_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_negative_pressure_response_free (grpc_c_context_t *context, void *buf);
/* g_im__im_version_query_request packer and unpacker methods */
size_t
g_im__im_version_query_request_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_version_query_request_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_version_query_request_free (grpc_c_context_t *context, void *buf);
/* g_im__im_version_query_response packer and unpacker methods */
size_t
g_im__im_version_query_response_packer (void *input, grpc_byte_buffer **buffer);
void *
g_im__im_version_query_response_unpacker (grpc_c_context_t *context, grpc_byte_buffer *buffer);void
g_im__im_version_query_response_free (grpc_c_context_t *context, void *buf);

/* --- services --- */

extern const char *g_im__im_service__methods[];

int g_im__im_service__service_init (grpc_c_server_t *server);

int g_im__im_service__im_cmd_call (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImCmdRequest *input, GIm__ImCmdResponse **output, grpc_c_status_t *status, long timeout);

int g_im__im_service__im_cmd_call__sync (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, grpc_c_context_t **context, GIm__ImCmdRequest *input, long timeout);

int g_im__im_service__im_cmd_call__async (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImCmdRequest *input,
                             grpc_c_client_callback_t *cb, void *tag);

void g_im__im_service__im_cmd_call_cb (grpc_c_context_t *context);

int g_im__im_service__im_ajust_call (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImAjustRequest *input, GIm__ImAjustResponse **output, grpc_c_status_t *status, long timeout);

int g_im__im_service__im_ajust_call__sync (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, grpc_c_context_t **context, GIm__ImAjustRequest *input, long timeout);

int g_im__im_service__im_ajust_call__async (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImAjustRequest *input,
                               grpc_c_client_callback_t *cb, void *tag);

void g_im__im_service__im_ajust_call_cb (grpc_c_context_t *context);

int g_im__im_service__im_debug_call (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImDebugRequest *input, GIm__ImDebugResponse **output, grpc_c_status_t *status, long timeout);

int g_im__im_service__im_debug_call__sync (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, grpc_c_context_t **context, GIm__ImDebugRequest *input, long timeout);

int g_im__im_service__im_debug_call__async (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImDebugRequest *input,
                               grpc_c_client_callback_t *cb, void *tag);

void g_im__im_service__im_debug_call_cb (grpc_c_context_t *context);

int g_im__im_service__im_eeprom_read (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImEepromRequest *input, GIm__ImEepromReadResponse **output, grpc_c_status_t *status, long timeout);

int g_im__im_service__im_eeprom_read__sync (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, grpc_c_context_t **context, GIm__ImEepromRequest *input, long timeout);

int g_im__im_service__im_eeprom_read__async (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImEepromRequest *input,
                                grpc_c_client_callback_t *cb, void *tag);

void g_im__im_service__im_eeprom_read_cb (grpc_c_context_t *context);

int g_im__im_service__im_eeprom_write (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImEepromRequest *input, GIm__ImEepromWriteResponse **output, grpc_c_status_t *status, long timeout);

int g_im__im_service__im_eeprom_write__sync (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, grpc_c_context_t **context, GIm__ImEepromRequest *input, long timeout);

int g_im__im_service__im_eeprom_write__async (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImEepromRequest *input,
                                 grpc_c_client_callback_t *cb, void *tag);

void g_im__im_service__im_eeprom_write_cb (grpc_c_context_t *context);

int g_im__im_service__im_negative_pressure_adjust_call (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImNegativePressureRequest *input, GIm__ImNegativePressureResponse **output, grpc_c_status_t *status, long timeout);

int g_im__im_service__im_negative_pressure_adjust_call__sync (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, grpc_c_context_t **context, GIm__ImNegativePressureRequest *input, long timeout);

int g_im__im_service__im_negative_pressure_adjust_call__async (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImNegativePressureRequest *input,
                                                  grpc_c_client_callback_t *cb, void *tag);

void g_im__im_service__im_negative_pressure_adjust_call_cb (grpc_c_context_t *context);

int g_im__im_service__im_adjust_call_version_query (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImVersionQueryRequest *input, GIm__ImVersionQueryResponse **output, grpc_c_status_t *status, long timeout);

int g_im__im_service__im_adjust_call_version_query__sync (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, grpc_c_context_t **context, GIm__ImVersionQueryRequest *input, long timeout);

int g_im__im_service__im_adjust_call_version_query__async (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImVersionQueryRequest *input,
                                              grpc_c_client_callback_t *cb, void *tag);

void g_im__im_service__im_adjust_call_version_query_cb (grpc_c_context_t *context);

extern const char *g_im__pc_service__methods[];

int g_im__pc_service__service_init (grpc_c_server_t *server);

int g_im__pc_service__ui_data_call (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImUiData *input, GIm__ImUiDataResponse **output, grpc_c_status_t *status, long timeout);

int g_im__pc_service__ui_data_call__sync (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, grpc_c_context_t **context, GIm__ImUiData *input, long timeout);

int g_im__pc_service__ui_data_call__async (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImUiData *input,
                              grpc_c_client_callback_t *cb, void *tag);

void g_im__pc_service__ui_data_call_cb (grpc_c_context_t *context);

int g_im__pc_service__ui_security_call (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImSecurityData *input, GIm__ImUiDataResponse **output, grpc_c_status_t *status, long timeout);

int g_im__pc_service__ui_security_call__sync (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, grpc_c_context_t **context, GIm__ImSecurityData *input, long timeout);

int g_im__pc_service__ui_security_call__async (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImSecurityData *input,
                                  grpc_c_client_callback_t *cb, void *tag);

void g_im__pc_service__ui_security_call_cb (grpc_c_context_t *context);

int g_im__pc_service__ui_upgrade_call (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImDeviceUpgradeData *input, GIm__ImUiDataResponse **output, grpc_c_status_t *status, long timeout);

int g_im__pc_service__ui_upgrade_call__sync (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, grpc_c_context_t **context, GIm__ImDeviceUpgradeData *input, long timeout);

int g_im__pc_service__ui_upgrade_call__async (grpc_c_client_t *client, grpc_c_metadata_array_t *array, uint32_t flags, GIm__ImDeviceUpgradeData *input,
                                 grpc_c_client_callback_t *cb, void *tag);

void g_im__pc_service__ui_upgrade_call_cb (grpc_c_context_t *context);

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    g_im__cmd_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__cmd_result__descriptor;
extern const ProtobufCEnumDescriptor    g_im__sysconf_update_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__auth_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__channel_st__descriptor;
extern const ProtobufCEnumDescriptor    g_im__power_channel_st__descriptor;
extern const ProtobufCEnumDescriptor    g_im__ch_assist_st__descriptor;
extern const ProtobufCEnumDescriptor    g_im__im_eeprom_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__im_fator_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__im_fator_option__descriptor;
extern const ProtobufCEnumDescriptor    g_im__im_appoint_stop_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__im_warn_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__lower_machine_warn_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__lower_machine_arm_fault_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__lower_machine_channel_fault_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__adjust_power_mode__descriptor;
extern const ProtobufCEnumDescriptor    g_im__device_state__descriptor;
extern const ProtobufCEnumDescriptor    g_im__door_state__descriptor;
extern const ProtobufCEnumDescriptor    g_im__accessdoor_state__descriptor;
extern const ProtobufCEnumDescriptor    g_im__tray_state__descriptor;
extern const ProtobufCEnumDescriptor    g_im__needlebed_state__descriptor;
extern const ProtobufCEnumDescriptor    g_im__firedoor_state__descriptor;
extern const ProtobufCEnumDescriptor    g_im__scapegoat_state__descriptor;
extern const ProtobufCEnumDescriptor    g_im__reservoir_state__descriptor;
extern const ProtobufCEnumDescriptor    g_im__negativepressure_action__descriptor;
extern const ProtobufCEnumDescriptor    g_im__negativepressure_operation_items__descriptor;
extern const ProtobufCEnumDescriptor    g_im__serucrity_reset_state__descriptor;
extern const ProtobufCEnumDescriptor    g_im__secondary_security_result_state__descriptor;
extern const ProtobufCEnumDescriptor    g_im__plc_status__descriptor;
extern const ProtobufCEnumDescriptor    g_im__lowercomputer_status__descriptor;
extern const ProtobufCEnumDescriptor    g_im__stock_model__descriptor;
extern const ProtobufCEnumDescriptor    g_im__security_runing_state__descriptor;
extern const ProtobufCEnumDescriptor    g_im__electric_ball_valve_state__descriptor;
extern const ProtobufCEnumDescriptor    g_im__deviece_update_status__descriptor;
extern const ProtobufCEnumDescriptor    g_im__deviece_update_errorcode__descriptor;
extern const ProtobufCEnumDescriptor    g_im__device_upgrade_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__security_transfer_model__descriptor;
extern const ProtobufCEnumDescriptor    g_im__workjust_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__stock_state__descriptor;
extern const ProtobufCEnumDescriptor    g_im__execute_result__descriptor;
extern const ProtobufCEnumDescriptor    g_im__negative_pressure_cmd_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__negative_pressure_op_res__descriptor;
extern const ProtobufCEnumDescriptor    g_im__negative_pressure_vacuum_valve_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__version_query_chip_type__descriptor;
extern const ProtobufCEnumDescriptor    g_im__version_query_type__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_cmd_head__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_auth__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_data_store4unit__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_data_store4alarm__descriptor;
extern const ProtobufCMessageDescriptor g_im__smoke_item__descriptor;
extern const ProtobufCMessageDescriptor g_im__smoke_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_co_item__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_co_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_fan__item__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_fan_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_temp_item__descriptor;
extern const ProtobufCMessageDescriptor g_im__env_temp_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__negativepressure_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__alarm_param_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__alarm_set_param_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__serucrity_alarm_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__serucrity_combination_alarm_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__lowercomputer_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__plc_failure_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_stock_security_info__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_security_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_device_update_info__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_device_passthrough_response__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_device_upgrade_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_device_upgrad_notify__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_netcard_param__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_master_channel_ret__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_step_jump__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_channel_continue_ret__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_channel_enable_byip_result__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_channel_appoint_stop__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_security_stop_by_stock__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_channel_test__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_channel_clear_warn__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_security_clear_warn__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_display_time_protection__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_soft_update__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_device_update__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_device_passthrough__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_cmd_request__descriptor;
extern const ProtobufCMessageDescriptor g_im__execute_serucrity_result__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_cmd_response__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_chnnel_warn__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_extern_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_channel_param__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_cell_param__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_ui_data__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_ui_data_response__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_ajust_request__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_ajust_response__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_debug_request__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_debug_response__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_eeprom_request__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_eeprom_read_response__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_eeprom_write_response__descriptor;
extern const ProtobufCMessageDescriptor g_im__negative_pressure_param__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_negative_pressure_request__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_negative_pressure_response__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_version_query_request__descriptor;
extern const ProtobufCMessageDescriptor g_im__im_version_query_response__descriptor;


#endif  /* PROTOBUF_C_im_2eproto__INCLUDED */
